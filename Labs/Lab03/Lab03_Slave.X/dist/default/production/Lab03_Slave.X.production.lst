

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Wed Aug 04 13:37:10 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	intentry,global,class=CODE,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    20                           	dabs	1,0x7E,2
    21  0000                     
    22                           ; Version 2.20
    23                           ; Generated 12/02/2020 GMT
    24                           ; 
    25                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC16F887 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  0006                     	;# 
    63  0007                     	;# 
    64  0008                     	;# 
    65  0009                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000D                     	;# 
    70  000E                     	;# 
    71  000E                     	;# 
    72  000F                     	;# 
    73  0010                     	;# 
    74  0011                     	;# 
    75  0012                     	;# 
    76  0013                     	;# 
    77  0014                     	;# 
    78  0015                     	;# 
    79  0015                     	;# 
    80  0016                     	;# 
    81  0017                     	;# 
    82  0018                     	;# 
    83  0019                     	;# 
    84  001A                     	;# 
    85  001B                     	;# 
    86  001B                     	;# 
    87  001C                     	;# 
    88  001D                     	;# 
    89  001E                     	;# 
    90  001F                     	;# 
    91  0081                     	;# 
    92  0085                     	;# 
    93  0086                     	;# 
    94  0087                     	;# 
    95  0088                     	;# 
    96  0089                     	;# 
    97  008C                     	;# 
    98  008D                     	;# 
    99  008E                     	;# 
   100  008F                     	;# 
   101  0090                     	;# 
   102  0091                     	;# 
   103  0092                     	;# 
   104  0093                     	;# 
   105  0093                     	;# 
   106  0093                     	;# 
   107  0094                     	;# 
   108  0095                     	;# 
   109  0096                     	;# 
   110  0097                     	;# 
   111  0098                     	;# 
   112  0099                     	;# 
   113  009A                     	;# 
   114  009B                     	;# 
   115  009C                     	;# 
   116  009D                     	;# 
   117  009E                     	;# 
   118  009F                     	;# 
   119  0105                     	;# 
   120  0107                     	;# 
   121  0108                     	;# 
   122  0109                     	;# 
   123  010C                     	;# 
   124  010C                     	;# 
   125  010D                     	;# 
   126  010E                     	;# 
   127  010F                     	;# 
   128  0185                     	;# 
   129  0187                     	;# 
   130  0188                     	;# 
   131  0189                     	;# 
   132  018C                     	;# 
   133  018D                     	;# 
   134  0000                     	;# 
   135  0001                     	;# 
   136  0002                     	;# 
   137  0003                     	;# 
   138  0004                     	;# 
   139  0005                     	;# 
   140  0006                     	;# 
   141  0007                     	;# 
   142  0008                     	;# 
   143  0009                     	;# 
   144  000A                     	;# 
   145  000B                     	;# 
   146  000C                     	;# 
   147  000D                     	;# 
   148  000E                     	;# 
   149  000E                     	;# 
   150  000F                     	;# 
   151  0010                     	;# 
   152  0011                     	;# 
   153  0012                     	;# 
   154  0013                     	;# 
   155  0014                     	;# 
   156  0015                     	;# 
   157  0015                     	;# 
   158  0016                     	;# 
   159  0017                     	;# 
   160  0018                     	;# 
   161  0019                     	;# 
   162  001A                     	;# 
   163  001B                     	;# 
   164  001B                     	;# 
   165  001C                     	;# 
   166  001D                     	;# 
   167  001E                     	;# 
   168  001F                     	;# 
   169  0081                     	;# 
   170  0085                     	;# 
   171  0086                     	;# 
   172  0087                     	;# 
   173  0088                     	;# 
   174  0089                     	;# 
   175  008C                     	;# 
   176  008D                     	;# 
   177  008E                     	;# 
   178  008F                     	;# 
   179  0090                     	;# 
   180  0091                     	;# 
   181  0092                     	;# 
   182  0093                     	;# 
   183  0093                     	;# 
   184  0093                     	;# 
   185  0094                     	;# 
   186  0095                     	;# 
   187  0096                     	;# 
   188  0097                     	;# 
   189  0098                     	;# 
   190  0099                     	;# 
   191  009A                     	;# 
   192  009B                     	;# 
   193  009C                     	;# 
   194  009D                     	;# 
   195  009E                     	;# 
   196  009F                     	;# 
   197  0105                     	;# 
   198  0107                     	;# 
   199  0108                     	;# 
   200  0109                     	;# 
   201  010C                     	;# 
   202  010C                     	;# 
   203  010D                     	;# 
   204  010E                     	;# 
   205  010F                     	;# 
   206  0185                     	;# 
   207  0187                     	;# 
   208  0188                     	;# 
   209  0189                     	;# 
   210  018C                     	;# 
   211  018D                     	;# 
   212  0000                     	;# 
   213  0001                     	;# 
   214  0002                     	;# 
   215  0003                     	;# 
   216  0004                     	;# 
   217  0005                     	;# 
   218  0006                     	;# 
   219  0007                     	;# 
   220  0008                     	;# 
   221  0009                     	;# 
   222  000A                     	;# 
   223  000B                     	;# 
   224  000C                     	;# 
   225  000D                     	;# 
   226  000E                     	;# 
   227  000E                     	;# 
   228  000F                     	;# 
   229  0010                     	;# 
   230  0011                     	;# 
   231  0012                     	;# 
   232  0013                     	;# 
   233  0014                     	;# 
   234  0015                     	;# 
   235  0015                     	;# 
   236  0016                     	;# 
   237  0017                     	;# 
   238  0018                     	;# 
   239  0019                     	;# 
   240  001A                     	;# 
   241  001B                     	;# 
   242  001B                     	;# 
   243  001C                     	;# 
   244  001D                     	;# 
   245  001E                     	;# 
   246  001F                     	;# 
   247  0081                     	;# 
   248  0085                     	;# 
   249  0086                     	;# 
   250  0087                     	;# 
   251  0088                     	;# 
   252  0089                     	;# 
   253  008C                     	;# 
   254  008D                     	;# 
   255  008E                     	;# 
   256  008F                     	;# 
   257  0090                     	;# 
   258  0091                     	;# 
   259  0092                     	;# 
   260  0093                     	;# 
   261  0093                     	;# 
   262  0093                     	;# 
   263  0094                     	;# 
   264  0095                     	;# 
   265  0096                     	;# 
   266  0097                     	;# 
   267  0098                     	;# 
   268  0099                     	;# 
   269  009A                     	;# 
   270  009B                     	;# 
   271  009C                     	;# 
   272  009D                     	;# 
   273  009E                     	;# 
   274  009F                     	;# 
   275  0105                     	;# 
   276  0107                     	;# 
   277  0108                     	;# 
   278  0109                     	;# 
   279  010C                     	;# 
   280  010C                     	;# 
   281  010D                     	;# 
   282  010E                     	;# 
   283  010F                     	;# 
   284  0185                     	;# 
   285  0187                     	;# 
   286  0188                     	;# 
   287  0189                     	;# 
   288  018C                     	;# 
   289  018D                     	;# 
   290  0000                     	;# 
   291  0001                     	;# 
   292  0002                     	;# 
   293  0003                     	;# 
   294  0004                     	;# 
   295  0005                     	;# 
   296  0006                     	;# 
   297  0007                     	;# 
   298  0008                     	;# 
   299  0009                     	;# 
   300  000A                     	;# 
   301  000B                     	;# 
   302  000C                     	;# 
   303  000D                     	;# 
   304  000E                     	;# 
   305  000E                     	;# 
   306  000F                     	;# 
   307  0010                     	;# 
   308  0011                     	;# 
   309  0012                     	;# 
   310  0013                     	;# 
   311  0014                     	;# 
   312  0015                     	;# 
   313  0015                     	;# 
   314  0016                     	;# 
   315  0017                     	;# 
   316  0018                     	;# 
   317  0019                     	;# 
   318  001A                     	;# 
   319  001B                     	;# 
   320  001B                     	;# 
   321  001C                     	;# 
   322  001D                     	;# 
   323  001E                     	;# 
   324  001F                     	;# 
   325  0081                     	;# 
   326  0085                     	;# 
   327  0086                     	;# 
   328  0087                     	;# 
   329  0088                     	;# 
   330  0089                     	;# 
   331  008C                     	;# 
   332  008D                     	;# 
   333  008E                     	;# 
   334  008F                     	;# 
   335  0090                     	;# 
   336  0091                     	;# 
   337  0092                     	;# 
   338  0093                     	;# 
   339  0093                     	;# 
   340  0093                     	;# 
   341  0094                     	;# 
   342  0095                     	;# 
   343  0096                     	;# 
   344  0097                     	;# 
   345  0098                     	;# 
   346  0099                     	;# 
   347  009A                     	;# 
   348  009B                     	;# 
   349  009C                     	;# 
   350  009D                     	;# 
   351  009E                     	;# 
   352  009F                     	;# 
   353  0105                     	;# 
   354  0107                     	;# 
   355  0108                     	;# 
   356  0109                     	;# 
   357  010C                     	;# 
   358  010C                     	;# 
   359  010D                     	;# 
   360  010E                     	;# 
   361  010F                     	;# 
   362  0185                     	;# 
   363  0187                     	;# 
   364  0188                     	;# 
   365  0189                     	;# 
   366  018C                     	;# 
   367  018D                     	;# 
   368  000C                     _PIR1bits	set	12
   369  000B                     _INTCONbits	set	11
   370  0008                     _PORTD	set	8
   371  0006                     _PORTB	set	6
   372  001F                     _ADCON0bits	set	31
   373  0013                     _SSPBUF	set	19
   374  0014                     _SSPCON	set	20
   375  001E                     _ADRESH	set	30
   376  0063                     _SSPIF	set	99
   377  0085                     _TRISAbits	set	133
   378  008C                     _PIE1bits	set	140
   379  009F                     _ADCON1bits	set	159
   380  0089                     _TRISE	set	137
   381  0088                     _TRISD	set	136
   382  0086                     _TRISB	set	134
   383  0094                     _SSPSTATbits	set	148
   384  0094                     _SSPSTAT	set	148
   385  043B                     _TRISC3	set	1083
   386  043D                     _TRISC5	set	1085
   387  0189                     _ANSELH	set	393
   388  0188                     _ANSEL	set	392
   389                           
   390                           	psect	cinit
   391  000F                     start_initialization:	
   392                           ; #config settings
   393                           
   394  000F                     __initialization:
   395                           
   396                           ; Clear objects allocated to COMMON
   397  000F  01F6               	clrf	__pbssCOMMON& (0+127)
   398  0010  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   399  0011  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   400  0012  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   401                           
   402                           ; Clear objects allocated to BANK0
   403  0013  1383               	bcf	3,7	;select IRP bank0
   404  0014  3020               	movlw	low __pbssBANK0
   405  0015  0084               	movwf	4
   406  0016  303E               	movlw	low (__pbssBANK0+30)
   407  0017  120A  118A  2110  120A  118A  	fcall	clear_ram0
   408  001C                     end_of_initialization:	
   409                           ;End of C runtime variable initialization code
   410                           
   411  001C                     __end_of__initialization:
   412  001C  0183               	clrf	3
   413  001D  120A  118A  2820   	ljmp	_main	;jump to C main() function
   414                           
   415                           	psect	bssCOMMON
   416  0076                     __pbssCOMMON:
   417  0076                     _val:
   418  0076                     	ds	1
   419  0077                     _ban:
   420  0077                     	ds	1
   421  0078                     _dig:
   422  0078                     	ds	1
   423  0079                     _temporal:
   424  0079                     	ds	1
   425                           
   426                           	psect	bssBANK0
   427  0020                     __pbssBANK0:
   428  0020                     _s:
   429  0020                     	ds	30
   430                           
   431                           	psect	clrtext
   432  0110                     clear_ram0:	
   433                           ;	Called with FSR containing the base address, and
   434                           ;	W with the last address+1
   435                           
   436  0110  0064               	clrwdt	;clear the watchdog before getting into this loop
   437  0111                     clrloop0:
   438  0111  0180               	clrf	0	;clear RAM location pointed to by FSR
   439  0112  0A84               	incf	4,f	;increment pointer
   440  0113  0604               	xorwf	4,w	;XOR with final address
   441  0114  1903               	btfsc	3,2	;have we reached the end yet?
   442  0115  3400               	retlw	0	;all done for this memory range, return
   443  0116  0604               	xorwf	4,w	;XOR again to restore value
   444  0117  2911               	goto	clrloop0	;do the next byte
   445                           
   446                           	psect	cstackCOMMON
   447  0070                     __pcstackCOMMON:
   448  0070                     ?_setup:
   449  0070                     ?_ADC:	
   450                           ; 1 bytes @ 0x0
   451                           
   452  0070                     ?_spiReceiveWait:	
   453                           ; 1 bytes @ 0x0
   454                           
   455  0070                     ??_spiReceiveWait:	
   456                           ; 1 bytes @ 0x0
   457                           
   458  0070                     ?_spiWrite:	
   459                           ; 1 bytes @ 0x0
   460                           
   461  0070                     ??_spiWrite:	
   462                           ; 1 bytes @ 0x0
   463                           
   464  0070                     ?_spiRead:	
   465                           ; 1 bytes @ 0x0
   466                           
   467  0070                     ??_spiRead:	
   468                           ; 1 bytes @ 0x0
   469                           
   470  0070                     ?_isr:	
   471                           ; 1 bytes @ 0x0
   472                           
   473  0070                     ?_main:	
   474                           ; 1 bytes @ 0x0
   475                           
   476  0070                     spiWrite@dat:	
   477                           ; 1 bytes @ 0x0
   478                           
   479                           
   480                           ; 1 bytes @ 0x0
   481  0070                     	ds	1
   482  0071                     ??_isr:
   483                           
   484                           ; 1 bytes @ 0x1
   485  0071                     	ds	3
   486  0074                     ??_ADC:
   487  0074                     ??_spiInit:	
   488                           ; 1 bytes @ 0x4
   489                           
   490  0074                     spiInit@sType:	
   491                           ; 1 bytes @ 0x4
   492                           
   493                           
   494                           ; 1 bytes @ 0x4
   495  0074                     	ds	1
   496  0075                     ??_setup:
   497  0075                     ADC@dig:	
   498                           ; 1 bytes @ 0x5
   499                           
   500                           
   501                           ; 1 bytes @ 0x5
   502  0075                     	ds	1
   503                           
   504                           	psect	cstackBANK0
   505  003E                     __pcstackBANK0:
   506  003E                     ?_spiInit:
   507  003E                     spiInit@sDataSample:	
   508                           ; 1 bytes @ 0x0
   509                           
   510                           
   511                           ; 1 bytes @ 0x0
   512  003E                     	ds	1
   513  003F                     spiInit@sClockIdle:
   514                           
   515                           ; 1 bytes @ 0x1
   516  003F                     	ds	1
   517  0040                     spiInit@sTransmitEdge:
   518                           
   519                           ; 1 bytes @ 0x2
   520  0040                     	ds	1
   521  0041                     ??_main:
   522                           
   523                           ; 1 bytes @ 0x3
   524  0041                     	ds	3
   525                           
   526                           	psect	maintext
   527  0020                     __pmaintext:	
   528 ;;
   529 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   530 ;;
   531 ;; *************** function _main *****************
   532 ;; Defined at:
   533 ;;		line 79 in file "Slave.c"
   534 ;; Parameters:    Size  Location     Type
   535 ;;		None
   536 ;; Auto vars:     Size  Location     Type
   537 ;;		None
   538 ;; Return value:  Size  Location     Type
   539 ;;                  1    wreg      void 
   540 ;; Registers used:
   541 ;;		wreg, status,2, status,0, pclath, cstack
   542 ;; Tracked objects:
   543 ;;		On entry : B00/0
   544 ;;		On exit  : 0/0
   545 ;;		Unchanged: 0/0
   546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   547 ;;      Params:         0       0       0       0       0
   548 ;;      Locals:         0       0       0       0       0
   549 ;;      Temps:          0       3       0       0       0
   550 ;;      Totals:         0       3       0       0       0
   551 ;;Total ram usage:        3 bytes
   552 ;; Hardware stack levels required when called: 5
   553 ;; This function calls:
   554 ;;		_ADC
   555 ;;		_setup
   556 ;; This function is called by:
   557 ;;		Startup code after reset
   558 ;; This function uses a non-reentrant model
   559 ;;
   560                           
   561                           
   562                           ;psect for function _main
   563  0020                     _main:
   564  0020                     l928:	
   565                           ;incstack = 0
   566                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   567                           
   568                           
   569                           ;Slave.c: 80:     setup();
   570  0020  120A  118A  208E  120A  118A  	fcall	_setup
   571  0025                     l930:
   572                           
   573                           ;Slave.c: 83:         if(ADCON0bits.GO == 0){
   574  0025  1283               	bcf	3,5	;RP0=0, select bank0
   575  0026  1303               	bcf	3,6	;RP1=0, select bank0
   576  0027  189F               	btfsc	31,1	;volatile
   577  0028  282A               	goto	u121
   578  0029  282B               	goto	u120
   579  002A                     u121:
   580  002A  287C               	goto	l954
   581  002B                     u120:
   582  002B                     l932:
   583                           
   584                           ;Slave.c: 84:             if(ADCON0bits.CHS == 5 ){
   585  002B  0C1F               	rrf	31,w	;volatile
   586  002C  00C1               	movwf	??_main
   587  002D  0C41               	rrf	??_main,w
   588  002E  390F               	andlw	15
   589  002F  3A05               	xorlw	5
   590  0030  1D03               	skipz
   591  0031  2833               	goto	u131
   592  0032  2834               	goto	u130
   593  0033                     u131:
   594  0033  284D               	goto	l940
   595  0034                     u130:
   596  0034                     l934:
   597                           
   598                           ;Slave.c: 85:                 ADCON0bits.CHS = 6;
   599  0034  081F               	movf	31,w	;volatile
   600  0035  39C3               	andlw	-61
   601  0036  3818               	iorlw	24
   602  0037  009F               	movwf	31	;volatile
   603  0038                     l936:
   604                           
   605                           ;Slave.c: 86:                 val = ADC(dig);
   606  0038  3000               	movlw	0
   607  0039  120A  118A  2118  120A  118A  	fcall	_ADC
   608  003E  1283               	bcf	3,5	;RP0=0, select bank0
   609  003F  1303               	bcf	3,6	;RP1=0, select bank0
   610  0040  00C1               	movwf	??_main
   611  0041  0841               	movf	??_main,w
   612  0042  00F6               	movwf	_val
   613  0043                     l938:
   614                           
   615                           ;Slave.c: 87:                 PORTB = ADC(dig);
   616  0043  3000               	movlw	0
   617  0044  120A  118A  2118  120A  118A  	fcall	_ADC
   618  0049  1283               	bcf	3,5	;RP0=0, select bank0
   619  004A  1303               	bcf	3,6	;RP1=0, select bank0
   620  004B  0086               	movwf	6	;volatile
   621                           
   622                           ;Slave.c: 88:             }
   623  004C  286E               	goto	l948
   624  004D                     l940:
   625  004D  0C1F               	rrf	31,w	;volatile
   626  004E  00C1               	movwf	??_main
   627  004F  0C41               	rrf	??_main,w
   628  0050  390F               	andlw	15
   629  0051  3A06               	xorlw	6
   630  0052  1D03               	skipz
   631  0053  2855               	goto	u141
   632  0054  2856               	goto	u140
   633  0055                     u141:
   634  0055  286E               	goto	l948
   635  0056                     u140:
   636  0056                     l942:
   637                           
   638                           ;Slave.c: 90:                 ADCON0bits.CHS = 5;
   639  0056  081F               	movf	31,w	;volatile
   640  0057  39C3               	andlw	-61
   641  0058  3814               	iorlw	20
   642  0059  009F               	movwf	31	;volatile
   643  005A                     l944:
   644                           
   645                           ;Slave.c: 91:                 val = ADC(dig);
   646  005A  3000               	movlw	0
   647  005B  120A  118A  2118  120A  118A  	fcall	_ADC
   648  0060  1283               	bcf	3,5	;RP0=0, select bank0
   649  0061  1303               	bcf	3,6	;RP1=0, select bank0
   650  0062  00C1               	movwf	??_main
   651  0063  0841               	movf	??_main,w
   652  0064  00F6               	movwf	_val
   653  0065                     l946:
   654                           
   655                           ;Slave.c: 92:                 PORTD = ADC(dig);
   656  0065  3000               	movlw	0
   657  0066  120A  118A  2118  120A  118A  	fcall	_ADC
   658  006B  1283               	bcf	3,5	;RP0=0, select bank0
   659  006C  1303               	bcf	3,6	;RP1=0, select bank0
   660  006D  0088               	movwf	8	;volatile
   661  006E                     l948:
   662                           
   663                           ;Slave.c: 94:             ban = 0;
   664  006E  01F7               	clrf	_ban
   665  006F                     l950:
   666                           
   667                           ;Slave.c: 95:             _delay((unsigned long)((50)*(8000000/4000.0)));
   668  006F  3082               	movlw	130
   669  0070  1283               	bcf	3,5	;RP0=0, select bank0
   670  0071  1303               	bcf	3,6	;RP1=0, select bank0
   671  0072  00C2               	movwf	??_main+1
   672  0073  30DD               	movlw	221
   673  0074  00C1               	movwf	??_main
   674  0075                     u157:
   675  0075  0BC1               	decfsz	??_main,f
   676  0076  2875               	goto	u157
   677  0077  0BC2               	decfsz	??_main+1,f
   678  0078  2875               	goto	u157
   679  0079                     l952:
   680                           
   681                           ;Slave.c: 96:             ADCON0bits.GO = 1;
   682  0079  1283               	bcf	3,5	;RP0=0, select bank0
   683  007A  1303               	bcf	3,6	;RP1=0, select bank0
   684  007B  149F               	bsf	31,1	;volatile
   685  007C                     l954:
   686                           
   687                           ;Slave.c: 100:        _delay((unsigned long)((250)*(8000000/4000.0)));
   688  007C  3003               	movlw	3
   689  007D  1283               	bcf	3,5	;RP0=0, select bank0
   690  007E  1303               	bcf	3,6	;RP1=0, select bank0
   691  007F  00C3               	movwf	??_main+2
   692  0080  308A               	movlw	138
   693  0081  00C2               	movwf	??_main+1
   694  0082  3055               	movlw	85
   695  0083  00C1               	movwf	??_main
   696  0084                     u167:
   697  0084  0BC1               	decfsz	??_main,f
   698  0085  2884               	goto	u167
   699  0086  0BC2               	decfsz	??_main+1,f
   700  0087  2884               	goto	u167
   701  0088  0BC3               	decfsz	??_main+2,f
   702  0089  2884               	goto	u167
   703  008A  2825               	goto	l930
   704  008B  120A  118A  280C   	ljmp	start
   705  008E                     __end_of_main:
   706                           
   707                           	psect	text1
   708  008E                     __ptext1:	
   709 ;; *************** function _setup *****************
   710 ;; Defined at:
   711 ;;		line 107 in file "Slave.c"
   712 ;; Parameters:    Size  Location     Type
   713 ;;		None
   714 ;; Auto vars:     Size  Location     Type
   715 ;;		None
   716 ;; Return value:  Size  Location     Type
   717 ;;                  1    wreg      void 
   718 ;; Registers used:
   719 ;;		wreg, status,2, status,0, pclath, cstack
   720 ;; Tracked objects:
   721 ;;		On entry : 0/0
   722 ;;		On exit  : 0/0
   723 ;;		Unchanged: 0/0
   724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   725 ;;      Params:         0       0       0       0       0
   726 ;;      Locals:         0       0       0       0       0
   727 ;;      Temps:          1       0       0       0       0
   728 ;;      Totals:         1       0       0       0       0
   729 ;;Total ram usage:        1 bytes
   730 ;; Hardware stack levels used: 1
   731 ;; Hardware stack levels required when called: 4
   732 ;; This function calls:
   733 ;;		_spiInit
   734 ;; This function is called by:
   735 ;;		_main
   736 ;; This function uses a non-reentrant model
   737 ;;
   738                           
   739                           
   740                           ;psect for function _setup
   741  008E                     _setup:
   742  008E                     l890:	
   743                           ;incstack = 0
   744                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
   745                           
   746                           
   747                           ;Slave.c: 109:     ANSEL = 0b01100000;
   748  008E  3060               	movlw	96
   749  008F  1683               	bsf	3,5	;RP0=1, select bank3
   750  0090  1703               	bsf	3,6	;RP1=1, select bank3
   751  0091  0088               	movwf	8	;volatile
   752  0092                     l892:
   753                           
   754                           ;Slave.c: 110:     ANSELH = 0x00;
   755  0092  0189               	clrf	9	;volatile
   756  0093                     l894:
   757                           
   758                           ;Slave.c: 113:     TRISB = 0x00;
   759  0093  1683               	bsf	3,5	;RP0=1, select bank1
   760  0094  1303               	bcf	3,6	;RP1=0, select bank1
   761  0095  0186               	clrf	6	;volatile
   762  0096                     l896:
   763                           
   764                           ;Slave.c: 114:     TRISD = 0x00;
   765  0096  0188               	clrf	8	;volatile
   766  0097                     l898:
   767                           
   768                           ;Slave.c: 115:     TRISE = 0x03;
   769  0097  3003               	movlw	3
   770  0098  0089               	movwf	9	;volatile
   771                           
   772                           ;Slave.c: 117:     PORTB = 0;
   773  0099  1283               	bcf	3,5	;RP0=0, select bank0
   774  009A  1303               	bcf	3,6	;RP1=0, select bank0
   775  009B  0186               	clrf	6	;volatile
   776                           
   777                           ;Slave.c: 118:     PORTD = 0;
   778  009C  0188               	clrf	8	;volatile
   779  009D                     l900:
   780                           
   781                           ;Slave.c: 121:     ADCON1bits.ADFM = 0;
   782  009D  1683               	bsf	3,5	;RP0=1, select bank1
   783  009E  1303               	bcf	3,6	;RP1=0, select bank1
   784  009F  139F               	bcf	31,7	;volatile
   785  00A0                     l902:
   786                           
   787                           ;Slave.c: 122:     ADCON1bits.VCFG0 = 0;
   788  00A0  121F               	bcf	31,4	;volatile
   789  00A1                     l904:
   790                           
   791                           ;Slave.c: 123:     ADCON1bits.VCFG1 = 0;
   792  00A1  129F               	bcf	31,5	;volatile
   793  00A2                     l906:
   794                           
   795                           ;Slave.c: 124:     ADCON0bits.ADCS = 1;
   796  00A2  1283               	bcf	3,5	;RP0=0, select bank0
   797  00A3  1303               	bcf	3,6	;RP1=0, select bank0
   798  00A4  081F               	movf	31,w	;volatile
   799  00A5  393F               	andlw	-193
   800  00A6  3840               	iorlw	64
   801  00A7  009F               	movwf	31	;volatile
   802  00A8                     l908:
   803                           
   804                           ;Slave.c: 125:     ADCON0bits.CHS = 5;
   805  00A8  081F               	movf	31,w	;volatile
   806  00A9  39C3               	andlw	-61
   807  00AA  3814               	iorlw	20
   808  00AB  009F               	movwf	31	;volatile
   809  00AC                     l910:
   810                           
   811                           ;Slave.c: 126:     _delay((unsigned long)((100)*(8000000/4000000.0)));
   812  00AC  3042               	movlw	66
   813  00AD  00F5               	movwf	??_setup
   814  00AE                     u177:
   815  00AE  0BF5               	decfsz	??_setup,f
   816  00AF  28AE               	goto	u177
   817  00B0  0000               	nop
   818  00B1                     l912:
   819                           
   820                           ;Slave.c: 127:     ADCON0bits.ADCS = 1;
   821  00B1  1283               	bcf	3,5	;RP0=0, select bank0
   822  00B2  1303               	bcf	3,6	;RP1=0, select bank0
   823  00B3  081F               	movf	31,w	;volatile
   824  00B4  393F               	andlw	-193
   825  00B5  3840               	iorlw	64
   826  00B6  009F               	movwf	31	;volatile
   827  00B7                     l914:
   828                           
   829                           ;Slave.c: 128:     ADCON0bits.ADON = 1;
   830  00B7  141F               	bsf	31,0	;volatile
   831  00B8                     l916:
   832                           
   833                           ;Slave.c: 131:     INTCONbits.GIE = 1;
   834  00B8  178B               	bsf	11,7	;volatile
   835  00B9                     l918:
   836                           
   837                           ;Slave.c: 132:     INTCONbits.PEIE = 1;
   838  00B9  170B               	bsf	11,6	;volatile
   839  00BA                     l920:
   840                           
   841                           ;Slave.c: 133:     PIR1bits.SSPIF = 0;
   842  00BA  118C               	bcf	12,3	;volatile
   843  00BB                     l922:
   844                           
   845                           ;Slave.c: 134:     PIE1bits.SSPIE = 1;
   846  00BB  1683               	bsf	3,5	;RP0=1, select bank1
   847  00BC  1303               	bcf	3,6	;RP1=0, select bank1
   848  00BD  158C               	bsf	12,3	;volatile
   849  00BE                     l924:
   850                           
   851                           ;Slave.c: 135:     TRISAbits.TRISA5 = 1;
   852  00BE  1685               	bsf	5,5	;volatile
   853  00BF                     l926:
   854                           
   855                           ;Slave.c: 138:     spiInit(SPI_SLAVE_SS_EN, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_IDLE_LOW, 
      +                          SPI_IDLE_2_ACTIVE);
   856  00BF  1283               	bcf	3,5	;RP0=0, select bank0
   857  00C0  1303               	bcf	3,6	;RP1=0, select bank0
   858  00C1  01BE               	clrf	spiInit@sDataSample
   859  00C2  01BF               	clrf	spiInit@sClockIdle
   860  00C3  01C0               	clrf	spiInit@sTransmitEdge
   861  00C4  3024               	movlw	36
   862  00C5  120A  118A  20CB  120A  118A  	fcall	_spiInit
   863  00CA                     l110:
   864  00CA  0008               	return
   865  00CB                     __end_of_setup:
   866                           
   867                           	psect	text2
   868  00CB                     __ptext2:	
   869 ;; *************** function _spiInit *****************
   870 ;; Defined at:
   871 ;;		line 12 in file "SPI.c"
   872 ;; Parameters:    Size  Location     Type
   873 ;;  sType           1    wreg     enum E1264
   874 ;;  sDataSample     1    0[BANK0 ] enum E1272
   875 ;;  sClockIdle      1    1[BANK0 ] enum E1276
   876 ;;  sTransmitEdg    1    2[BANK0 ] enum E1280
   877 ;; Auto vars:     Size  Location     Type
   878 ;;  sType           1    4[COMMON] enum E1264
   879 ;; Return value:  Size  Location     Type
   880 ;;                  1    wreg      void 
   881 ;; Registers used:
   882 ;;		wreg, status,2, status,0
   883 ;; Tracked objects:
   884 ;;		On entry : 0/0
   885 ;;		On exit  : 0/0
   886 ;;		Unchanged: 0/0
   887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   888 ;;      Params:         0       3       0       0       0
   889 ;;      Locals:         1       0       0       0       0
   890 ;;      Temps:          0       0       0       0       0
   891 ;;      Totals:         1       3       0       0       0
   892 ;;Total ram usage:        4 bytes
   893 ;; Hardware stack levels used: 1
   894 ;; Hardware stack levels required when called: 3
   895 ;; This function calls:
   896 ;;		Nothing
   897 ;; This function is called by:
   898 ;;		_setup
   899 ;; This function uses a non-reentrant model
   900 ;;
   901                           
   902                           
   903                           ;psect for function _spiInit
   904  00CB                     _spiInit:
   905                           
   906                           ;incstack = 0
   907                           ; Regs used in _spiInit: [wreg+status,2+status,0]
   908                           ;spiInit@sType stored from wreg
   909  00CB  00F4               	movwf	spiInit@sType
   910  00CC                     l880:
   911                           
   912                           ;SPI.c: 12: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);SPI.c: 13: {;SPI.c: 14:     TRISC5 = 0;
   913  00CC  1683               	bsf	3,5	;RP0=1, select bank1
   914  00CD  1303               	bcf	3,6	;RP1=0, select bank1
   915  00CE  1287               	bcf	7,5	;volatile
   916                           
   917                           ;SPI.c: 15:     if(sType & 0b00000100)
   918  00CF  1D74               	btfss	spiInit@sType,2
   919  00D0  28D2               	goto	u111
   920  00D1  28D3               	goto	u110
   921  00D2                     u111:
   922  00D2  28DB               	goto	l886
   923  00D3                     u110:
   924  00D3                     l882:
   925                           
   926                           ;SPI.c: 16:     {;SPI.c: 17:         SSPSTAT = sTransmitEdge;
   927  00D3  1283               	bcf	3,5	;RP0=0, select bank0
   928  00D4  1303               	bcf	3,6	;RP1=0, select bank0
   929  00D5  0840               	movf	spiInit@sTransmitEdge,w
   930  00D6  1683               	bsf	3,5	;RP0=1, select bank1
   931  00D7  1303               	bcf	3,6	;RP1=0, select bank1
   932  00D8  0094               	movwf	20	;volatile
   933  00D9                     l884:
   934                           
   935                           ;SPI.c: 18:         TRISC3 = 1;
   936  00D9  1587               	bsf	7,3	;volatile
   937                           
   938                           ;SPI.c: 19:     }
   939  00DA  28E3               	goto	l21
   940  00DB                     l886:
   941                           
   942                           ;SPI.c: 21:     {;SPI.c: 22:         SSPSTAT = sDataSample | sTransmitEdge;
   943  00DB  1283               	bcf	3,5	;RP0=0, select bank0
   944  00DC  1303               	bcf	3,6	;RP1=0, select bank0
   945  00DD  083E               	movf	spiInit@sDataSample,w
   946  00DE  0440               	iorwf	spiInit@sTransmitEdge,w
   947  00DF  1683               	bsf	3,5	;RP0=1, select bank1
   948  00E0  1303               	bcf	3,6	;RP1=0, select bank1
   949  00E1  0094               	movwf	20	;volatile
   950  00E2                     l888:
   951                           
   952                           ;SPI.c: 23:         TRISC3 = 0;
   953  00E2  1187               	bcf	7,3	;volatile
   954  00E3                     l21:	
   955                           ;SPI.c: 24:     }
   956                           
   957                           
   958                           ;SPI.c: 26:     SSPCON = sType | sClockIdle;
   959  00E3  0874               	movf	spiInit@sType,w
   960  00E4  1283               	bcf	3,5	;RP0=0, select bank0
   961  00E5  1303               	bcf	3,6	;RP1=0, select bank0
   962  00E6  043F               	iorwf	spiInit@sClockIdle,w
   963  00E7  0094               	movwf	20	;volatile
   964  00E8                     l22:
   965  00E8  0008               	return
   966  00E9                     __end_of_spiInit:
   967                           
   968                           	psect	text3
   969  0118                     __ptext3:	
   970 ;; *************** function _ADC *****************
   971 ;; Defined at:
   972 ;;		line 17 in file "ADC.c"
   973 ;; Parameters:    Size  Location     Type
   974 ;;  dig             1    wreg     unsigned char 
   975 ;; Auto vars:     Size  Location     Type
   976 ;;  dig             1    5[COMMON] unsigned char 
   977 ;; Return value:  Size  Location     Type
   978 ;;                  1    wreg      unsigned char 
   979 ;; Registers used:
   980 ;;		wreg
   981 ;; Tracked objects:
   982 ;;		On entry : 0/0
   983 ;;		On exit  : 0/0
   984 ;;		Unchanged: 0/0
   985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   986 ;;      Params:         0       0       0       0       0
   987 ;;      Locals:         1       0       0       0       0
   988 ;;      Temps:          1       0       0       0       0
   989 ;;      Totals:         2       0       0       0       0
   990 ;;Total ram usage:        2 bytes
   991 ;; Hardware stack levels used: 1
   992 ;; Hardware stack levels required when called: 3
   993 ;; This function calls:
   994 ;;		Nothing
   995 ;; This function is called by:
   996 ;;		_main
   997 ;; This function uses a non-reentrant model
   998 ;;
   999                           
  1000                           
  1001                           ;psect for function _ADC
  1002  0118                     _ADC:
  1003  0118                     l714:	
  1004                           ;incstack = 0
  1005                           ; Regs used in _ADC: [wreg]
  1006                           
  1007                           
  1008                           ;ADC.c: 18:     dig = ADRESH;
  1009  0118  1283               	bcf	3,5	;RP0=0, select bank0
  1010  0119  1303               	bcf	3,6	;RP1=0, select bank0
  1011  011A  081E               	movf	30,w	;volatile
  1012  011B  00F4               	movwf	??_ADC
  1013  011C  0874               	movf	??_ADC,w
  1014  011D  00F5               	movwf	ADC@dig
  1015                           
  1016                           ;ADC.c: 19: return dig;
  1017  011E  0875               	movf	ADC@dig,w
  1018  011F                     l5:
  1019  011F  0008               	return
  1020  0120                     __end_of_ADC:
  1021                           
  1022                           	psect	text4
  1023  00E9                     __ptext4:	
  1024 ;; *************** function _isr *****************
  1025 ;; Defined at:
  1026 ;;		line 69 in file "Slave.c"
  1027 ;; Parameters:    Size  Location     Type
  1028 ;;		None
  1029 ;; Auto vars:     Size  Location     Type
  1030 ;;		None
  1031 ;; Return value:  Size  Location     Type
  1032 ;;                  1    wreg      void 
  1033 ;; Registers used:
  1034 ;;		wreg, status,2, status,0, pclath, cstack
  1035 ;; Tracked objects:
  1036 ;;		On entry : 0/0
  1037 ;;		On exit  : 0/0
  1038 ;;		Unchanged: 0/0
  1039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1040 ;;      Params:         0       0       0       0       0
  1041 ;;      Locals:         0       0       0       0       0
  1042 ;;      Temps:          3       0       0       0       0
  1043 ;;      Totals:         3       0       0       0       0
  1044 ;;Total ram usage:        3 bytes
  1045 ;; Hardware stack levels used: 1
  1046 ;; Hardware stack levels required when called: 2
  1047 ;; This function calls:
  1048 ;;		_spiRead
  1049 ;;		_spiWrite
  1050 ;; This function is called by:
  1051 ;;		Interrupt level 1
  1052 ;; This function uses a non-reentrant model
  1053 ;;
  1054                           
  1055                           
  1056                           ;psect for function _isr
  1057  00E9                     _isr:
  1058  00E9                     i1l770:
  1059                           
  1060                           ;Slave.c: 70:    if(SSPIF == 1){
  1061  00E9  1283               	bcf	3,5	;RP0=0, select bank0
  1062  00EA  1303               	bcf	3,6	;RP1=0, select bank0
  1063  00EB  1D8C               	btfss	12,3	;volatile
  1064  00EC  28EE               	goto	u3_21
  1065  00ED  28EF               	goto	u3_20
  1066  00EE                     u3_21:
  1067  00EE  2900               	goto	i1l95
  1068  00EF                     u3_20:
  1069  00EF                     i1l772:
  1070                           
  1071                           ;Slave.c: 71:         ban = spiRead();
  1072  00EF  120A  118A  2107  120A  118A  	fcall	_spiRead
  1073  00F4  00F1               	movwf	??_isr
  1074  00F5  0871               	movf	??_isr,w
  1075  00F6  00F7               	movwf	_ban
  1076                           
  1077                           ;Slave.c: 72:         spiWrite(val);
  1078  00F7  0876               	movf	_val,w
  1079  00F8  120A  118A  2127  120A  118A  	fcall	_spiWrite
  1080  00FD                     i1l774:
  1081                           
  1082                           ;Slave.c: 73:         SSPIF = 0;
  1083  00FD  1283               	bcf	3,5	;RP0=0, select bank0
  1084  00FE  1303               	bcf	3,6	;RP1=0, select bank0
  1085  00FF  118C               	bcf	12,3	;volatile
  1086  0100                     i1l95:
  1087  0100  0873               	movf	??_isr+2,w
  1088  0101  008A               	movwf	10
  1089  0102  0E72               	swapf	??_isr+1,w
  1090  0103  0083               	movwf	3
  1091  0104  0EFE               	swapf	btemp,f
  1092  0105  0E7E               	swapf	btemp,w
  1093  0106  0009               	retfie
  1094  0107                     __end_of_isr:
  1095                           
  1096                           	psect	intentry
  1097  0004                     __pintentry:	
  1098                           ;incstack = 0
  1099                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  1100                           
  1101  0004                     interrupt_function:
  1102  007E                     saved_w	set	btemp
  1103  0004  00FE               	movwf	btemp
  1104  0005  0E03               	swapf	3,w
  1105  0006  00F2               	movwf	??_isr+1
  1106  0007  080A               	movf	10,w
  1107  0008  00F3               	movwf	??_isr+2
  1108  0009  120A  118A  28E9   	ljmp	_isr
  1109                           
  1110                           	psect	text5
  1111  0127                     __ptext5:	
  1112 ;; *************** function _spiWrite *****************
  1113 ;; Defined at:
  1114 ;;		line 34 in file "SPI.c"
  1115 ;; Parameters:    Size  Location     Type
  1116 ;;  dat             1    wreg     unsigned char 
  1117 ;; Auto vars:     Size  Location     Type
  1118 ;;  dat             1    0[COMMON] unsigned char 
  1119 ;; Return value:  Size  Location     Type
  1120 ;;                  1    wreg      void 
  1121 ;; Registers used:
  1122 ;;		wreg
  1123 ;; Tracked objects:
  1124 ;;		On entry : 0/0
  1125 ;;		On exit  : 0/0
  1126 ;;		Unchanged: 0/0
  1127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1128 ;;      Params:         0       0       0       0       0
  1129 ;;      Locals:         1       0       0       0       0
  1130 ;;      Temps:          0       0       0       0       0
  1131 ;;      Totals:         1       0       0       0       0
  1132 ;;Total ram usage:        1 bytes
  1133 ;; Hardware stack levels used: 1
  1134 ;; This function calls:
  1135 ;;		Nothing
  1136 ;; This function is called by:
  1137 ;;		_isr
  1138 ;; This function uses a non-reentrant model
  1139 ;;
  1140                           
  1141                           
  1142                           ;psect for function _spiWrite
  1143  0127                     _spiWrite:
  1144                           
  1145                           ;incstack = 0
  1146                           ; Regs used in _spiWrite: [wreg]
  1147                           ;spiWrite@dat stored from wreg
  1148  0127  00F0               	movwf	spiWrite@dat
  1149  0128                     i1l718:
  1150                           
  1151                           ;SPI.c: 34: void spiWrite(char dat);SPI.c: 35: {;SPI.c: 36:     SSPBUF = dat;
  1152  0128  0870               	movf	spiWrite@dat,w
  1153  0129  1283               	bcf	3,5	;RP0=0, select bank0
  1154  012A  1303               	bcf	3,6	;RP1=0, select bank0
  1155  012B  0093               	movwf	19	;volatile
  1156  012C                     i1l31:
  1157  012C  0008               	return
  1158  012D                     __end_of_spiWrite:
  1159                           
  1160                           	psect	text6
  1161  0107                     __ptext6:	
  1162 ;; *************** function _spiRead *****************
  1163 ;; Defined at:
  1164 ;;		line 47 in file "SPI.c"
  1165 ;; Parameters:    Size  Location     Type
  1166 ;;		None
  1167 ;; Auto vars:     Size  Location     Type
  1168 ;;		None
  1169 ;; Return value:  Size  Location     Type
  1170 ;;                  1    wreg      unsigned char 
  1171 ;; Registers used:
  1172 ;;		wreg, status,2, status,0, pclath, cstack
  1173 ;; Tracked objects:
  1174 ;;		On entry : 0/0
  1175 ;;		On exit  : 0/0
  1176 ;;		Unchanged: 0/0
  1177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1178 ;;      Params:         0       0       0       0       0
  1179 ;;      Locals:         0       0       0       0       0
  1180 ;;      Temps:          0       0       0       0       0
  1181 ;;      Totals:         0       0       0       0       0
  1182 ;;Total ram usage:        0 bytes
  1183 ;; Hardware stack levels used: 1
  1184 ;; Hardware stack levels required when called: 1
  1185 ;; This function calls:
  1186 ;;		_spiReceiveWait
  1187 ;; This function is called by:
  1188 ;;		_isr
  1189 ;; This function uses a non-reentrant model
  1190 ;;
  1191                           
  1192                           
  1193                           ;psect for function _spiRead
  1194  0107                     _spiRead:
  1195  0107                     i1l720:	
  1196                           ;incstack = 0
  1197                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  1198                           
  1199                           
  1200                           ;SPI.c: 49:     spiReceiveWait();
  1201  0107  120A  118A  2120  120A  118A  	fcall	_spiReceiveWait
  1202  010C                     i1l722:
  1203                           
  1204                           ;SPI.c: 50:     return(SSPBUF);
  1205  010C  1283               	bcf	3,5	;RP0=0, select bank0
  1206  010D  1303               	bcf	3,6	;RP1=0, select bank0
  1207  010E  0813               	movf	19,w	;volatile
  1208  010F                     i1l39:
  1209  010F  0008               	return
  1210  0110                     __end_of_spiRead:
  1211                           
  1212                           	psect	text7
  1213  0120                     __ptext7:	
  1214 ;; *************** function _spiReceiveWait *****************
  1215 ;; Defined at:
  1216 ;;		line 29 in file "SPI.c"
  1217 ;; Parameters:    Size  Location     Type
  1218 ;;		None
  1219 ;; Auto vars:     Size  Location     Type
  1220 ;;		None
  1221 ;; Return value:  Size  Location     Type
  1222 ;;                  1    wreg      void 
  1223 ;; Registers used:
  1224 ;;		None
  1225 ;; Tracked objects:
  1226 ;;		On entry : 0/0
  1227 ;;		On exit  : 0/0
  1228 ;;		Unchanged: 0/0
  1229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1230 ;;      Params:         0       0       0       0       0
  1231 ;;      Locals:         0       0       0       0       0
  1232 ;;      Temps:          0       0       0       0       0
  1233 ;;      Totals:         0       0       0       0       0
  1234 ;;Total ram usage:        0 bytes
  1235 ;; Hardware stack levels used: 1
  1236 ;; This function calls:
  1237 ;;		Nothing
  1238 ;; This function is called by:
  1239 ;;		_spiRead
  1240 ;; This function uses a non-reentrant model
  1241 ;;
  1242                           
  1243                           
  1244                           ;psect for function _spiReceiveWait
  1245  0120                     _spiReceiveWait:
  1246  0120                     i1l712:	
  1247                           ;incstack = 0
  1248                           ; Regs used in _spiReceiveWait: []
  1249                           
  1250  0120                     i1l25:	
  1251                           ;SPI.c: 31:     while ( !SSPSTATbits.BF );
  1252                           
  1253  0120  1683               	bsf	3,5	;RP0=1, select bank1
  1254  0121  1303               	bcf	3,6	;RP1=0, select bank1
  1255  0122  1C14               	btfss	20,0	;volatile
  1256  0123  2925               	goto	u2_21
  1257  0124  2926               	goto	u2_20
  1258  0125                     u2_21:
  1259  0125  2920               	goto	i1l25
  1260  0126                     u2_20:
  1261  0126                     i1l28:
  1262  0126  0008               	return
  1263  0127                     __end_of_spiReceiveWait:
  1264  007E                     btemp	set	126	;btemp
  1265  007E                     wtemp0	set	126
  1266                           
  1267                           	psect	config
  1268                           
  1269                           ;Config register CONFIG1 @ 0x2007
  1270                           ;	Oscillator Selection bits
  1271                           ;	FOSC = EXTRC_NOCLKOUT, RCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, RC on RA7
      +                          /OSC1/CLKIN
  1272                           ;	Watchdog Timer Enable bit
  1273                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1274                           ;	Power-up Timer Enable bit
  1275                           ;	PWRTE = OFF, PWRT disabled
  1276                           ;	RE3/MCLR pin function select bit
  1277                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  1278                           ;	Code Protection bit
  1279                           ;	CP = OFF, Program memory code protection is disabled
  1280                           ;	Data Code Protection bit
  1281                           ;	CPD = OFF, Data memory code protection is disabled
  1282                           ;	Brown Out Reset Selection bits
  1283                           ;	BOREN = OFF, BOR disabled
  1284                           ;	Internal External Switchover bit
  1285                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1286                           ;	Fail-Safe Clock Monitor Enabled bit
  1287                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1288                           ;	Low Voltage Programming Enable bit
  1289                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1290                           ;	In-Circuit Debugger Mode bit
  1291                           ;	DEBUG = 0x1, unprogrammed default
  1292  2007                     	org	8199
  1293  2007  20D6               	dw	8406
  1294                           
  1295                           ;Config register CONFIG2 @ 0x2008
  1296                           ;	Brown-out Reset Selection bit
  1297                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  1298                           ;	Flash Program Memory Self Write Enable bits
  1299                           ;	WRT = OFF, Write protection off
  1300  2008                     	org	8200
  1301  2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         34
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80      6      36
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_ADC
    _main->_setup
    _setup->_spiInit

Critical Paths under _isr in COMMON

    _isr->_spiWrite

Critical Paths under _main in BANK0

    _setup->_spiInit

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     471
                                              3 BANK0      3     3      0
                                _ADC
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                1     1      0     456
                                              5 COMMON     1     1      0
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              4     1      3     456
                                              4 COMMON     1     1      0
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (1) _ADC                                                  2     2      0      15
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  3     3      0      15
                                              1 COMMON     3     3      0
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (4) _spiWrite                                             1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (5) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC
   _setup
     _spiInit

 _isr (ROOT)
   _spiRead
     _spiReceiveWait
   _spiWrite

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      2E       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      6      24       5       45.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      2E      12        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Wed Aug 04 13:37:10 2021

                      l5 011F                        _s 0020              _SSPSTATbits 0094  
                     l21 00E3                       l22 00E8                       fsr 0004  
                    l110 00CA                      _ADC 0118                      l714 0118  
                    l900 009D                      l910 00AC                      l902 00A0  
                    l920 00BA                      l912 00B1                      l904 00A1  
                    l922 00BB                      l914 00B7                      l906 00A2  
                    l930 0025                      l924 00BE                      l916 00B8  
                    l908 00A8                      l940 004D                      l932 002B  
                    l926 00BF                      l918 00B9                      l950 006F  
                    l942 0056                      l934 0034                      l880 00CC  
                    l952 0079                      l944 005A                      l936 0038  
                    l928 0020                      l882 00D3                      l890 008E  
                    l946 0065                      l938 0043                      l954 007C  
                    l884 00D9                      l892 0092                      l948 006E  
                    l886 00DB                      l894 0093                      l888 00E2  
                    l896 0096                      l898 0097                      u110 00D3  
                    u111 00D2                      u120 002B                      u121 002A  
                    u130 0034                      u131 0033                      u140 0056  
                    u141 0055                      u157 0075                      u167 0084  
                    u177 00AE                      _ban 0077                      _dig 0078  
                    _isr 00E9                      _val 0076                      indf 0000  
                   ?_ADC 0070                     ?_isr 0070                     i1l31 012C  
                   i1l25 0120                     i1l28 0126                     i1l39 010F  
                   i1l95 0100                     u2_20 0126                     u2_21 0125  
                   u3_20 00EF                     u3_21 00EE                     _main 0020  
                   btemp 007E                     start 000C                    ??_ADC 0074  
                  ??_isr 0071                    ?_main 0070                    _ANSEL 0188  
                  i1l712 0120                    i1l720 0107                    i1l722 010C  
                  i1l718 0128                    i1l770 00E9                    i1l772 00EF  
                  i1l774 00FD                    _PORTB 0006                    _PORTD 0008  
                  _TRISB 0086                    _TRISD 0088                    _TRISE 0089  
                  _SSPIF 0063                    _setup 008E                    pclath 000A  
        __end_of_spiInit 00E9          __end_of_spiRead 0110                    status 0003  
                  wtemp0 007E          __initialization 000F             __end_of_main 008E  
                 ADC@dig 0075                   ??_main 0041                   _ADRESH 001E  
                 ?_setup 0070                   _ANSELH 0189                   _TRISC3 043B  
                 _TRISC5 043D                   _SSPCON 0014                   _SSPBUF 0013  
                 saved_w 007E         __end_of_spiWrite 012D                ??_spiInit 0074  
              ??_spiRead 0070  __end_of__initialization 001C           __pcstackCOMMON 0070  
          __end_of_setup 00CB                  ??_setup 0075               __pbssBANK0 0020  
             __pmaintext 0020               __pintentry 0004  __size_of_spiReceiveWait 0007  
                _SSPSTAT 0094                ?_spiWrite 0070                  __ptext1 008E  
                __ptext2 00CB                  __ptext3 0118                  __ptext4 00E9  
                __ptext5 0127                  __ptext6 0107                  __ptext7 0120  
           __size_of_ADC 0008             __size_of_isr 001E                  _spiInit 00CB  
                _spiRead 0107                  clrloop0 0111     end_of_initialization 001C  
             ??_spiWrite 0070                _TRISAbits 0085              spiWrite@dat 0070  
         _spiReceiveWait 0120      start_initialization 000F              __end_of_ADC 0120  
            __end_of_isr 0107   __end_of_spiReceiveWait 0127              __pbssCOMMON 0076  
              ___latbits 0002            __pcstackBANK0 003E          ?_spiReceiveWait 0070  
      __size_of_spiWrite 0006                 ?_spiInit 003E                 ?_spiRead 0070  
         __size_of_setup 003D     spiInit@sTransmitEdge 0040        interrupt_function 0004  
              clear_ram0 0110                 _PIE1bits 008C       spiInit@sDataSample 003E  
               _PIR1bits 000C               _ADCON0bits 001F               _ADCON1bits 009F  
       __size_of_spiInit 001E         __size_of_spiRead 0009            __size_of_main 006E  
               _temporal 0079                 _spiWrite 0127             spiInit@sType 0074  
      spiInit@sClockIdle 003F               _INTCONbits 000B                 intlevel1 0000  
       ??_spiReceiveWait 0070  
