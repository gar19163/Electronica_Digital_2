

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Wed Aug 04 13:34:03 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	intentry,global,class=CODE,delta=2
    18                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    19                           	dabs	1,0x7E,2
    20  0000                     
    21                           ; Version 2.20
    22                           ; Generated 12/02/2020 GMT
    23                           ; 
    24                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC16F887 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     	;# 
    56  0001                     	;# 
    57  0002                     	;# 
    58  0003                     	;# 
    59  0004                     	;# 
    60  0005                     	;# 
    61  0006                     	;# 
    62  0007                     	;# 
    63  0008                     	;# 
    64  0009                     	;# 
    65  000A                     	;# 
    66  000B                     	;# 
    67  000C                     	;# 
    68  000D                     	;# 
    69  000E                     	;# 
    70  000E                     	;# 
    71  000F                     	;# 
    72  0010                     	;# 
    73  0011                     	;# 
    74  0012                     	;# 
    75  0013                     	;# 
    76  0014                     	;# 
    77  0015                     	;# 
    78  0015                     	;# 
    79  0016                     	;# 
    80  0017                     	;# 
    81  0018                     	;# 
    82  0019                     	;# 
    83  001A                     	;# 
    84  001B                     	;# 
    85  001B                     	;# 
    86  001C                     	;# 
    87  001D                     	;# 
    88  001E                     	;# 
    89  001F                     	;# 
    90  0081                     	;# 
    91  0085                     	;# 
    92  0086                     	;# 
    93  0087                     	;# 
    94  0088                     	;# 
    95  0089                     	;# 
    96  008C                     	;# 
    97  008D                     	;# 
    98  008E                     	;# 
    99  008F                     	;# 
   100  0090                     	;# 
   101  0091                     	;# 
   102  0092                     	;# 
   103  0093                     	;# 
   104  0093                     	;# 
   105  0093                     	;# 
   106  0094                     	;# 
   107  0095                     	;# 
   108  0096                     	;# 
   109  0097                     	;# 
   110  0098                     	;# 
   111  0099                     	;# 
   112  009A                     	;# 
   113  009B                     	;# 
   114  009C                     	;# 
   115  009D                     	;# 
   116  009E                     	;# 
   117  009F                     	;# 
   118  0105                     	;# 
   119  0107                     	;# 
   120  0108                     	;# 
   121  0109                     	;# 
   122  010C                     	;# 
   123  010C                     	;# 
   124  010D                     	;# 
   125  010E                     	;# 
   126  010F                     	;# 
   127  0185                     	;# 
   128  0187                     	;# 
   129  0188                     	;# 
   130  0189                     	;# 
   131  018C                     	;# 
   132  018D                     	;# 
   133  0000                     	;# 
   134  0001                     	;# 
   135  0002                     	;# 
   136  0003                     	;# 
   137  0004                     	;# 
   138  0005                     	;# 
   139  0006                     	;# 
   140  0007                     	;# 
   141  0008                     	;# 
   142  0009                     	;# 
   143  000A                     	;# 
   144  000B                     	;# 
   145  000C                     	;# 
   146  000D                     	;# 
   147  000E                     	;# 
   148  000E                     	;# 
   149  000F                     	;# 
   150  0010                     	;# 
   151  0011                     	;# 
   152  0012                     	;# 
   153  0013                     	;# 
   154  0014                     	;# 
   155  0015                     	;# 
   156  0015                     	;# 
   157  0016                     	;# 
   158  0017                     	;# 
   159  0018                     	;# 
   160  0019                     	;# 
   161  001A                     	;# 
   162  001B                     	;# 
   163  001B                     	;# 
   164  001C                     	;# 
   165  001D                     	;# 
   166  001E                     	;# 
   167  001F                     	;# 
   168  0081                     	;# 
   169  0085                     	;# 
   170  0086                     	;# 
   171  0087                     	;# 
   172  0088                     	;# 
   173  0089                     	;# 
   174  008C                     	;# 
   175  008D                     	;# 
   176  008E                     	;# 
   177  008F                     	;# 
   178  0090                     	;# 
   179  0091                     	;# 
   180  0092                     	;# 
   181  0093                     	;# 
   182  0093                     	;# 
   183  0093                     	;# 
   184  0094                     	;# 
   185  0095                     	;# 
   186  0096                     	;# 
   187  0097                     	;# 
   188  0098                     	;# 
   189  0099                     	;# 
   190  009A                     	;# 
   191  009B                     	;# 
   192  009C                     	;# 
   193  009D                     	;# 
   194  009E                     	;# 
   195  009F                     	;# 
   196  0105                     	;# 
   197  0107                     	;# 
   198  0108                     	;# 
   199  0109                     	;# 
   200  010C                     	;# 
   201  010C                     	;# 
   202  010D                     	;# 
   203  010E                     	;# 
   204  010F                     	;# 
   205  0185                     	;# 
   206  0187                     	;# 
   207  0188                     	;# 
   208  0189                     	;# 
   209  018C                     	;# 
   210  018D                     	;# 
   211  0000                     	;# 
   212  0001                     	;# 
   213  0002                     	;# 
   214  0003                     	;# 
   215  0004                     	;# 
   216  0005                     	;# 
   217  0006                     	;# 
   218  0007                     	;# 
   219  0008                     	;# 
   220  0009                     	;# 
   221  000A                     	;# 
   222  000B                     	;# 
   223  000C                     	;# 
   224  000D                     	;# 
   225  000E                     	;# 
   226  000E                     	;# 
   227  000F                     	;# 
   228  0010                     	;# 
   229  0011                     	;# 
   230  0012                     	;# 
   231  0013                     	;# 
   232  0014                     	;# 
   233  0015                     	;# 
   234  0015                     	;# 
   235  0016                     	;# 
   236  0017                     	;# 
   237  0018                     	;# 
   238  0019                     	;# 
   239  001A                     	;# 
   240  001B                     	;# 
   241  001B                     	;# 
   242  001C                     	;# 
   243  001D                     	;# 
   244  001E                     	;# 
   245  001F                     	;# 
   246  0081                     	;# 
   247  0085                     	;# 
   248  0086                     	;# 
   249  0087                     	;# 
   250  0088                     	;# 
   251  0089                     	;# 
   252  008C                     	;# 
   253  008D                     	;# 
   254  008E                     	;# 
   255  008F                     	;# 
   256  0090                     	;# 
   257  0091                     	;# 
   258  0092                     	;# 
   259  0093                     	;# 
   260  0093                     	;# 
   261  0093                     	;# 
   262  0094                     	;# 
   263  0095                     	;# 
   264  0096                     	;# 
   265  0097                     	;# 
   266  0098                     	;# 
   267  0099                     	;# 
   268  009A                     	;# 
   269  009B                     	;# 
   270  009C                     	;# 
   271  009D                     	;# 
   272  009E                     	;# 
   273  009F                     	;# 
   274  0105                     	;# 
   275  0107                     	;# 
   276  0108                     	;# 
   277  0109                     	;# 
   278  010C                     	;# 
   279  010C                     	;# 
   280  010D                     	;# 
   281  010E                     	;# 
   282  010F                     	;# 
   283  0185                     	;# 
   284  0187                     	;# 
   285  0188                     	;# 
   286  0189                     	;# 
   287  018C                     	;# 
   288  018D                     	;# 
   289  0000                     	;# 
   290  0001                     	;# 
   291  0002                     	;# 
   292  0003                     	;# 
   293  0004                     	;# 
   294  0005                     	;# 
   295  0006                     	;# 
   296  0007                     	;# 
   297  0008                     	;# 
   298  0009                     	;# 
   299  000A                     	;# 
   300  000B                     	;# 
   301  000C                     	;# 
   302  000D                     	;# 
   303  000E                     	;# 
   304  000E                     	;# 
   305  000F                     	;# 
   306  0010                     	;# 
   307  0011                     	;# 
   308  0012                     	;# 
   309  0013                     	;# 
   310  0014                     	;# 
   311  0015                     	;# 
   312  0015                     	;# 
   313  0016                     	;# 
   314  0017                     	;# 
   315  0018                     	;# 
   316  0019                     	;# 
   317  001A                     	;# 
   318  001B                     	;# 
   319  001B                     	;# 
   320  001C                     	;# 
   321  001D                     	;# 
   322  001E                     	;# 
   323  001F                     	;# 
   324  0081                     	;# 
   325  0085                     	;# 
   326  0086                     	;# 
   327  0087                     	;# 
   328  0088                     	;# 
   329  0089                     	;# 
   330  008C                     	;# 
   331  008D                     	;# 
   332  008E                     	;# 
   333  008F                     	;# 
   334  0090                     	;# 
   335  0091                     	;# 
   336  0092                     	;# 
   337  0093                     	;# 
   338  0093                     	;# 
   339  0093                     	;# 
   340  0094                     	;# 
   341  0095                     	;# 
   342  0096                     	;# 
   343  0097                     	;# 
   344  0098                     	;# 
   345  0099                     	;# 
   346  009A                     	;# 
   347  009B                     	;# 
   348  009C                     	;# 
   349  009D                     	;# 
   350  009E                     	;# 
   351  009F                     	;# 
   352  0105                     	;# 
   353  0107                     	;# 
   354  0108                     	;# 
   355  0109                     	;# 
   356  010C                     	;# 
   357  010C                     	;# 
   358  010D                     	;# 
   359  010E                     	;# 
   360  010F                     	;# 
   361  0185                     	;# 
   362  0187                     	;# 
   363  0188                     	;# 
   364  0189                     	;# 
   365  018C                     	;# 
   366  018D                     	;# 
   367  000B                     _INTCONbits	set	11
   368  0018                     _RCSTAbits	set	24
   369  0008                     _PORTD	set	8
   370  0006                     _PORTB	set	6
   371  0007                     _PORTCbits	set	7
   372  001A                     _RCREG	set	26
   373  000C                     _PIR1bits	set	12
   374  0019                     _TXREG	set	25
   375  0013                     _SSPBUF	set	19
   376  0014                     _SSPCON	set	20
   377  0064                     _TXIF	set	100
   378  008C                     _PIE1bits	set	140
   379  009A                     _SPBRGH	set	154
   380  0099                     _SPBRG	set	153
   381  0098                     _TXSTAbits	set	152
   382  0087                     _TRISCbits	set	135
   383  0088                     _TRISD	set	136
   384  0086                     _TRISB	set	134
   385  0087                     _TRISC	set	135
   386  0094                     _SSPSTATbits	set	148
   387  0094                     _SSPSTAT	set	148
   388  043B                     _TRISC3	set	1083
   389  043D                     _TRISC5	set	1085
   390  0187                     _BAUDCTLbits	set	391
   391  0189                     _ANSELH	set	393
   392  0188                     _ANSEL	set	392
   393                           
   394                           	psect	cinit
   395  000F                     start_initialization:	
   396                           ; #config settings
   397                           
   398  000F                     __initialization:
   399                           
   400                           ; Clear objects allocated to COMMON
   401  000F  01F7               	clrf	__pbssCOMMON& (0+127)
   402  0010  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   403  0011  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   404  0012  01FA               	clrf	(__pbssCOMMON+3)& (0+127)
   405                           
   406                           ; Clear objects allocated to BANK0
   407  0013  1383               	bcf	3,7	;select IRP bank0
   408  0014  3020               	movlw	low __pbssBANK0
   409  0015  0084               	movwf	4
   410  0016  3048               	movlw	low (__pbssBANK0+40)
   411  0017  120A  118A  20F6  120A  118A  	fcall	clear_ram0
   412  001C                     end_of_initialization:	
   413                           ;End of C runtime variable initialization code
   414                           
   415  001C                     __end_of__initialization:
   416  001C  0183               	clrf	3
   417  001D  120A  118A  2820   	ljmp	_main	;jump to C main() function
   418                           
   419                           	psect	bssCOMMON
   420  0077                     __pbssCOMMON:
   421  0077                     _op:
   422  0077                     	ds	1
   423  0078                     _val2:
   424  0078                     	ds	1
   425  0079                     _val1:
   426  0079                     	ds	1
   427  007A                     _ban:
   428  007A                     	ds	1
   429                           
   430                           	psect	bssBANK0
   431  0020                     __pbssBANK0:
   432  0020                     _s:
   433  0020                     	ds	35
   434  0043                     _val:
   435  0043                     	ds	4
   436  0047                     _val3:
   437  0047                     	ds	1
   438                           
   439                           	psect	clrtext
   440  00F6                     clear_ram0:	
   441                           ;	Called with FSR containing the base address, and
   442                           ;	W with the last address+1
   443                           
   444  00F6  0064               	clrwdt	;clear the watchdog before getting into this loop
   445  00F7                     clrloop0:
   446  00F7  0180               	clrf	0	;clear RAM location pointed to by FSR
   447  00F8  0A84               	incf	4,f	;increment pointer
   448  00F9  0604               	xorwf	4,w	;XOR with final address
   449  00FA  1903               	btfsc	3,2	;have we reached the end yet?
   450  00FB  3400               	retlw	0	;all done for this memory range, return
   451  00FC  0604               	xorwf	4,w	;XOR again to restore value
   452  00FD  28F7               	goto	clrloop0	;do the next byte
   453                           
   454                           	psect	cstackCOMMON
   455  0070                     __pcstackCOMMON:
   456  0070                     ?_setup:
   457  0070                     ?_spiReceiveWait:	
   458                           ; 1 bytes @ 0x0
   459                           
   460  0070                     ?_spiWrite:	
   461                           ; 1 bytes @ 0x0
   462                           
   463  0070                     ?_spiRead:	
   464                           ; 1 bytes @ 0x0
   465                           
   466  0070                     ?_isr:	
   467                           ; 1 bytes @ 0x0
   468                           
   469  0070                     ??_isr:	
   470                           ; 1 bytes @ 0x0
   471                           
   472  0070                     ?_main:	
   473                           ; 1 bytes @ 0x0
   474                           
   475                           
   476                           ; 1 bytes @ 0x0
   477  0070                     	ds	3
   478  0073                     ?_spiInit:
   479  0073                     ??_spiReceiveWait:	
   480                           ; 1 bytes @ 0x3
   481                           
   482  0073                     ??_spiWrite:	
   483                           ; 1 bytes @ 0x3
   484                           
   485  0073                     ??_spiRead:	
   486                           ; 1 bytes @ 0x3
   487                           
   488  0073                     spiInit@sDataSample:	
   489                           ; 1 bytes @ 0x3
   490                           
   491  0073                     spiWrite@dat:	
   492                           ; 1 bytes @ 0x3
   493                           
   494                           
   495                           ; 1 bytes @ 0x3
   496  0073                     	ds	1
   497  0074                     spiInit@sClockIdle:
   498                           
   499                           ; 1 bytes @ 0x4
   500  0074                     	ds	1
   501  0075                     spiInit@sTransmitEdge:
   502                           
   503                           ; 1 bytes @ 0x5
   504  0075                     	ds	1
   505  0076                     ??_spiInit:
   506  0076                     spiInit@sType:	
   507                           ; 1 bytes @ 0x6
   508                           
   509                           
   510                           ; 1 bytes @ 0x6
   511  0076                     	ds	1
   512  0077                     ??_setup:
   513                           
   514                           	psect	cstackBANK0
   515  0048                     __pcstackBANK0:	
   516                           ; 1 bytes @ 0x7
   517                           
   518  0048                     ??_main:
   519                           
   520                           ; 1 bytes @ 0x0
   521  0048                     	ds	3
   522                           
   523                           	psect	maintext
   524  0020                     __pmaintext:	
   525 ;;
   526 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   527 ;;
   528 ;; *************** function _main *****************
   529 ;; Defined at:
   530 ;;		line 77 in file "Master.c"
   531 ;; Parameters:    Size  Location     Type
   532 ;;		None
   533 ;; Auto vars:     Size  Location     Type
   534 ;;		None
   535 ;; Return value:  Size  Location     Type
   536 ;;                  1    wreg      void 
   537 ;; Registers used:
   538 ;;		wreg, status,2, status,0, pclath, cstack
   539 ;; Tracked objects:
   540 ;;		On entry : B00/0
   541 ;;		On exit  : 0/0
   542 ;;		Unchanged: 0/0
   543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   544 ;;      Params:         0       0       0       0       0
   545 ;;      Locals:         0       0       0       0       0
   546 ;;      Temps:          0       3       0       0       0
   547 ;;      Totals:         0       3       0       0       0
   548 ;;Total ram usage:        3 bytes
   549 ;; Hardware stack levels required when called: 3
   550 ;; This function calls:
   551 ;;		_setup
   552 ;;		_spiRead
   553 ;;		_spiWrite
   554 ;; This function is called by:
   555 ;;		Startup code after reset
   556 ;; This function uses a non-reentrant model
   557 ;;
   558                           
   559                           
   560                           ;psect for function _main
   561  0020                     _main:
   562  0020                     l956:	
   563                           ;incstack = 0
   564                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   565                           
   566                           
   567                           ;Master.c: 78:     setup();
   568  0020  120A  118A  2091  120A  118A  	fcall	_setup
   569  0025                     l958:
   570                           
   571                           ;Master.c: 80:         PORTCbits.RC2 = 0;
   572  0025  1283               	bcf	3,5	;RP0=0, select bank0
   573  0026  1303               	bcf	3,6	;RP1=0, select bank0
   574  0027  1107               	bcf	7,2	;volatile
   575  0028                     l960:
   576                           
   577                           ;Master.c: 81:         _delay((unsigned long)((1)*(8000000/4000.0)));
   578  0028  3003               	movlw	3
   579  0029  1283               	bcf	3,5	;RP0=0, select bank0
   580  002A  1303               	bcf	3,6	;RP1=0, select bank0
   581  002B  00C9               	movwf	??_main+1
   582  002C  3097               	movlw	151
   583  002D  00C8               	movwf	??_main
   584  002E                     u177:
   585  002E  0BC8               	decfsz	??_main,f
   586  002F  282E               	goto	u177
   587  0030  0BC9               	decfsz	??_main+1,f
   588  0031  282E               	goto	u177
   589  0032                     l962:
   590                           
   591                           ;Master.c: 83:         spiWrite(ban);
   592  0032  087A               	movf	_ban,w
   593  0033  120A  118A  2105  120A  118A  	fcall	_spiWrite
   594  0038                     l964:
   595                           
   596                           ;Master.c: 84:         if (ban==0){
   597  0038  087A               	movf	_ban,w
   598  0039  1D03               	btfss	3,2
   599  003A  283C               	goto	u141
   600  003B  283D               	goto	u140
   601  003C                     u141:
   602  003C  284B               	goto	l972
   603  003D                     u140:
   604  003D                     l966:
   605                           
   606                           ;Master.c: 85:             PORTB = spiRead();
   607  003D  120A  118A  20ED  120A  118A  	fcall	_spiRead
   608  0042  1283               	bcf	3,5	;RP0=0, select bank0
   609  0043  1303               	bcf	3,6	;RP1=0, select bank0
   610  0044  0086               	movwf	6	;volatile
   611  0045                     l968:
   612                           
   613                           ;Master.c: 86:             val1 = PORTD;
   614  0045  0808               	movf	8,w	;volatile
   615  0046  00C8               	movwf	??_main
   616  0047  0848               	movf	??_main,w
   617  0048  00F9               	movwf	_val1
   618  0049                     l970:
   619                           
   620                           ;Master.c: 87:             ban = 0;
   621  0049  01FA               	clrf	_ban
   622                           
   623                           ;Master.c: 88:         }
   624  004A  2859               	goto	l978
   625  004B                     l972:
   626                           
   627                           ;Master.c: 90:             PORTD = spiRead();
   628  004B  120A  118A  20ED  120A  118A  	fcall	_spiRead
   629  0050  1283               	bcf	3,5	;RP0=0, select bank0
   630  0051  1303               	bcf	3,6	;RP1=0, select bank0
   631  0052  0088               	movwf	8	;volatile
   632  0053                     l974:
   633                           
   634                           ;Master.c: 91:             val2 = PORTD;
   635  0053  0808               	movf	8,w	;volatile
   636  0054  00C8               	movwf	??_main
   637  0055  0848               	movf	??_main,w
   638  0056  00F8               	movwf	_val2
   639  0057                     l976:
   640                           
   641                           ;Master.c: 92:             ban = 1;
   642  0057  01FA               	clrf	_ban
   643  0058  0AFA               	incf	_ban,f
   644  0059                     l978:
   645                           
   646                           ;Master.c: 94:         _delay((unsigned long)((1)*(8000000/4000.0)));
   647  0059  3003               	movlw	3
   648  005A  1283               	bcf	3,5	;RP0=0, select bank0
   649  005B  1303               	bcf	3,6	;RP1=0, select bank0
   650  005C  00C9               	movwf	??_main+1
   651  005D  3097               	movlw	151
   652  005E  00C8               	movwf	??_main
   653  005F                     u187:
   654  005F  0BC8               	decfsz	??_main,f
   655  0060  285F               	goto	u187
   656  0061  0BC9               	decfsz	??_main+1,f
   657  0062  285F               	goto	u187
   658  0063                     l980:
   659                           
   660                           ;Master.c: 95:         PORTCbits.RC2 = 1;
   661  0063  1283               	bcf	3,5	;RP0=0, select bank0
   662  0064  1303               	bcf	3,6	;RP1=0, select bank0
   663  0065  1507               	bsf	7,2	;volatile
   664  0066                     l982:
   665                           
   666                           ;Master.c: 97:          if (op=='+'){
   667  0066  302B               	movlw	43
   668  0067  0677               	xorwf	_op,w
   669  0068  1D03               	btfss	3,2
   670  0069  286B               	goto	u151
   671  006A  286C               	goto	u150
   672  006B                     u151:
   673  006B  2872               	goto	l988
   674  006C                     u150:
   675  006C                     l984:
   676                           
   677                           ;Master.c: 98:             val3++;
   678  006C  3001               	movlw	1
   679  006D  00C8               	movwf	??_main
   680  006E  0848               	movf	??_main,w
   681  006F  07C7               	addwf	_val3,f
   682  0070                     l986:
   683                           
   684                           ;Master.c: 99:             op = 0;
   685  0070  01F7               	clrf	_op
   686                           
   687                           ;Master.c: 100:         }
   688  0071  287B               	goto	l994
   689  0072                     l988:
   690  0072  302D               	movlw	45
   691  0073  0677               	xorwf	_op,w
   692  0074  1D03               	btfss	3,2
   693  0075  2877               	goto	u161
   694  0076  2878               	goto	u160
   695  0077                     u161:
   696  0077  287B               	goto	l994
   697  0078                     u160:
   698  0078                     l990:
   699                           
   700                           ;Master.c: 102:             val3--;
   701  0078  3001               	movlw	1
   702  0079  02C7               	subwf	_val3,f
   703  007A  2870               	goto	l986
   704  007B                     l994:
   705                           
   706                           ;Master.c: 113:         _delay((unsigned long)((500)*(8000000/4000.0)));
   707  007B  3006               	movlw	6
   708  007C  1283               	bcf	3,5	;RP0=0, select bank0
   709  007D  1303               	bcf	3,6	;RP1=0, select bank0
   710  007E  00CA               	movwf	??_main+2
   711  007F  3013               	movlw	19
   712  0080  00C9               	movwf	??_main+1
   713  0081  30AD               	movlw	173
   714  0082  00C8               	movwf	??_main
   715  0083                     u197:
   716  0083  0BC8               	decfsz	??_main,f
   717  0084  2883               	goto	u197
   718  0085  0BC9               	decfsz	??_main+1,f
   719  0086  2883               	goto	u197
   720  0087  0BCA               	decfsz	??_main+2,f
   721  0088  2883               	goto	u197
   722  0089                     l996:
   723                           
   724                           ;Master.c: 114:         TXREG = '\f';
   725  0089  300C               	movlw	12
   726  008A  1283               	bcf	3,5	;RP0=0, select bank0
   727  008B  1303               	bcf	3,6	;RP1=0, select bank0
   728  008C  0099               	movwf	25	;volatile
   729  008D  2825               	goto	l958
   730  008E  120A  118A  280C   	ljmp	start
   731  0091                     __end_of_main:
   732                           
   733                           	psect	text1
   734  0105                     __ptext1:	
   735 ;; *************** function _spiWrite *****************
   736 ;; Defined at:
   737 ;;		line 34 in file "SPI.c"
   738 ;; Parameters:    Size  Location     Type
   739 ;;  dat             1    wreg     unsigned char 
   740 ;; Auto vars:     Size  Location     Type
   741 ;;  dat             1    3[COMMON] unsigned char 
   742 ;; Return value:  Size  Location     Type
   743 ;;                  1    wreg      void 
   744 ;; Registers used:
   745 ;;		wreg
   746 ;; Tracked objects:
   747 ;;		On entry : 0/0
   748 ;;		On exit  : 0/0
   749 ;;		Unchanged: 0/0
   750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   751 ;;      Params:         0       0       0       0       0
   752 ;;      Locals:         1       0       0       0       0
   753 ;;      Temps:          0       0       0       0       0
   754 ;;      Totals:         1       0       0       0       0
   755 ;;Total ram usage:        1 bytes
   756 ;; Hardware stack levels used: 1
   757 ;; Hardware stack levels required when called: 1
   758 ;; This function calls:
   759 ;;		Nothing
   760 ;; This function is called by:
   761 ;;		_main
   762 ;; This function uses a non-reentrant model
   763 ;;
   764                           
   765                           
   766                           ;psect for function _spiWrite
   767  0105                     _spiWrite:
   768                           
   769                           ;incstack = 0
   770                           ; Regs used in _spiWrite: [wreg]
   771                           ;spiWrite@dat stored from wreg
   772  0105  00F3               	movwf	spiWrite@dat
   773  0106                     l866:
   774                           
   775                           ;SPI.c: 34: void spiWrite(char dat);SPI.c: 35: {;SPI.c: 36:     SSPBUF = dat;
   776  0106  0873               	movf	spiWrite@dat,w
   777  0107  1283               	bcf	3,5	;RP0=0, select bank0
   778  0108  1303               	bcf	3,6	;RP1=0, select bank0
   779  0109  0093               	movwf	19	;volatile
   780  010A                     l26:
   781  010A  0008               	return
   782  010B                     __end_of_spiWrite:
   783                           
   784                           	psect	text2
   785  00ED                     __ptext2:	
   786 ;; *************** function _spiRead *****************
   787 ;; Defined at:
   788 ;;		line 47 in file "SPI.c"
   789 ;; Parameters:    Size  Location     Type
   790 ;;		None
   791 ;; Auto vars:     Size  Location     Type
   792 ;;		None
   793 ;; Return value:  Size  Location     Type
   794 ;;                  1    wreg      unsigned char 
   795 ;; Registers used:
   796 ;;		wreg, status,2, status,0, pclath, cstack
   797 ;; Tracked objects:
   798 ;;		On entry : 0/0
   799 ;;		On exit  : 0/0
   800 ;;		Unchanged: 0/0
   801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   802 ;;      Params:         0       0       0       0       0
   803 ;;      Locals:         0       0       0       0       0
   804 ;;      Temps:          0       0       0       0       0
   805 ;;      Totals:         0       0       0       0       0
   806 ;;Total ram usage:        0 bytes
   807 ;; Hardware stack levels used: 1
   808 ;; Hardware stack levels required when called: 2
   809 ;; This function calls:
   810 ;;		_spiReceiveWait
   811 ;; This function is called by:
   812 ;;		_main
   813 ;; This function uses a non-reentrant model
   814 ;;
   815                           
   816                           
   817                           ;psect for function _spiRead
   818  00ED                     _spiRead:
   819  00ED                     l868:	
   820                           ;incstack = 0
   821                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
   822                           
   823                           
   824                           ;SPI.c: 49:     spiReceiveWait();
   825  00ED  120A  118A  20FE  120A  118A  	fcall	_spiReceiveWait
   826  00F2                     l870:
   827                           
   828                           ;SPI.c: 50:     return(SSPBUF);
   829  00F2  1283               	bcf	3,5	;RP0=0, select bank0
   830  00F3  1303               	bcf	3,6	;RP1=0, select bank0
   831  00F4  0813               	movf	19,w	;volatile
   832  00F5                     l34:
   833  00F5  0008               	return
   834  00F6                     __end_of_spiRead:
   835                           
   836                           	psect	text3
   837  00FE                     __ptext3:	
   838 ;; *************** function _spiReceiveWait *****************
   839 ;; Defined at:
   840 ;;		line 29 in file "SPI.c"
   841 ;; Parameters:    Size  Location     Type
   842 ;;		None
   843 ;; Auto vars:     Size  Location     Type
   844 ;;		None
   845 ;; Return value:  Size  Location     Type
   846 ;;                  1    wreg      void 
   847 ;; Registers used:
   848 ;;		None
   849 ;; Tracked objects:
   850 ;;		On entry : 0/0
   851 ;;		On exit  : 0/0
   852 ;;		Unchanged: 0/0
   853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   854 ;;      Params:         0       0       0       0       0
   855 ;;      Locals:         0       0       0       0       0
   856 ;;      Temps:          0       0       0       0       0
   857 ;;      Totals:         0       0       0       0       0
   858 ;;Total ram usage:        0 bytes
   859 ;; Hardware stack levels used: 1
   860 ;; Hardware stack levels required when called: 1
   861 ;; This function calls:
   862 ;;		Nothing
   863 ;; This function is called by:
   864 ;;		_spiRead
   865 ;; This function uses a non-reentrant model
   866 ;;
   867                           
   868                           
   869                           ;psect for function _spiReceiveWait
   870  00FE                     _spiReceiveWait:
   871  00FE                     l864:	
   872                           ;incstack = 0
   873                           ; Regs used in _spiReceiveWait: []
   874                           
   875  00FE                     l20:	
   876                           ;SPI.c: 31:     while ( !SSPSTATbits.BF );
   877                           
   878  00FE  1683               	bsf	3,5	;RP0=1, select bank1
   879  00FF  1303               	bcf	3,6	;RP1=0, select bank1
   880  0100  1C14               	btfss	20,0	;volatile
   881  0101  2903               	goto	u101
   882  0102  2904               	goto	u100
   883  0103                     u101:
   884  0103  28FE               	goto	l20
   885  0104                     u100:
   886  0104                     l23:
   887  0104  0008               	return
   888  0105                     __end_of_spiReceiveWait:
   889                           
   890                           	psect	text4
   891  0091                     __ptext4:	
   892 ;; *************** function _setup *****************
   893 ;; Defined at:
   894 ;;		line 121 in file "Master.c"
   895 ;; Parameters:    Size  Location     Type
   896 ;;		None
   897 ;; Auto vars:     Size  Location     Type
   898 ;;		None
   899 ;; Return value:  Size  Location     Type
   900 ;;                  1    wreg      void 
   901 ;; Registers used:
   902 ;;		wreg, status,2, status,0, pclath, cstack
   903 ;; Tracked objects:
   904 ;;		On entry : 0/0
   905 ;;		On exit  : 0/0
   906 ;;		Unchanged: 0/0
   907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   908 ;;      Params:         0       0       0       0       0
   909 ;;      Locals:         0       0       0       0       0
   910 ;;      Temps:          0       0       0       0       0
   911 ;;      Totals:         0       0       0       0       0
   912 ;;Total ram usage:        0 bytes
   913 ;; Hardware stack levels used: 1
   914 ;; Hardware stack levels required when called: 2
   915 ;; This function calls:
   916 ;;		_spiInit
   917 ;; This function is called by:
   918 ;;		_main
   919 ;; This function uses a non-reentrant model
   920 ;;
   921                           
   922                           
   923                           ;psect for function _setup
   924  0091                     _setup:
   925  0091                     l874:	
   926                           ;incstack = 0
   927                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
   928                           
   929                           
   930                           ;Master.c: 123:     ANSEL = 0b00;
   931  0091  1683               	bsf	3,5	;RP0=1, select bank3
   932  0092  1703               	bsf	3,6	;RP1=1, select bank3
   933  0093  0188               	clrf	8	;volatile
   934                           
   935                           ;Master.c: 124:     ANSELH = 0x00;
   936  0094  0189               	clrf	9	;volatile
   937  0095                     l876:
   938                           
   939                           ;Master.c: 127:     TRISC = 0b10000000;
   940  0095  3080               	movlw	128
   941  0096  1683               	bsf	3,5	;RP0=1, select bank1
   942  0097  1303               	bcf	3,6	;RP1=0, select bank1
   943  0098  0087               	movwf	7	;volatile
   944  0099                     l878:
   945                           
   946                           ;Master.c: 128:     TRISB = 0;
   947  0099  0186               	clrf	6	;volatile
   948  009A                     l880:
   949                           
   950                           ;Master.c: 129:     TRISD = 0;
   951  009A  0188               	clrf	8	;volatile
   952  009B                     l882:
   953                           
   954                           ;Master.c: 130:     PORTB = 0;
   955  009B  1283               	bcf	3,5	;RP0=0, select bank0
   956  009C  1303               	bcf	3,6	;RP1=0, select bank0
   957  009D  0186               	clrf	6	;volatile
   958  009E                     l884:
   959                           
   960                           ;Master.c: 131:     PORTD = 0;
   961  009E  0188               	clrf	8	;volatile
   962  009F                     l886:
   963                           
   964                           ;Master.c: 132:     TRISCbits.TRISC2 = 1;
   965  009F  1683               	bsf	3,5	;RP0=1, select bank1
   966  00A0  1303               	bcf	3,6	;RP1=0, select bank1
   967  00A1  1507               	bsf	7,2	;volatile
   968  00A2                     l888:
   969                           
   970                           ;Master.c: 135:     TXSTAbits.SYNC = 0;
   971  00A2  1218               	bcf	24,4	;volatile
   972  00A3                     l890:
   973                           
   974                           ;Master.c: 136:     TXSTAbits.BRGH = 0;
   975  00A3  1118               	bcf	24,2	;volatile
   976  00A4                     l892:
   977                           
   978                           ;Master.c: 137:     BAUDCTLbits.BRG16 = 1;
   979  00A4  1683               	bsf	3,5	;RP0=1, select bank3
   980  00A5  1703               	bsf	3,6	;RP1=1, select bank3
   981  00A6  1587               	bsf	7,3	;volatile
   982  00A7                     l894:
   983                           
   984                           ;Master.c: 138:     SPBRG = 51;
   985  00A7  3033               	movlw	51
   986  00A8  1683               	bsf	3,5	;RP0=1, select bank1
   987  00A9  1303               	bcf	3,6	;RP1=0, select bank1
   988  00AA  0099               	movwf	25	;volatile
   989                           
   990                           ;Master.c: 139:     SPBRGH = 0;
   991  00AB  019A               	clrf	26	;volatile
   992  00AC                     l896:
   993                           
   994                           ;Master.c: 140:     RCSTAbits.SPEN = 1;
   995  00AC  1283               	bcf	3,5	;RP0=0, select bank0
   996  00AD  1303               	bcf	3,6	;RP1=0, select bank0
   997  00AE  1798               	bsf	24,7	;volatile
   998  00AF                     l898:
   999                           
  1000                           ;Master.c: 141:     RCSTAbits.RX9 = 0;
  1001  00AF  1318               	bcf	24,6	;volatile
  1002  00B0                     l900:
  1003                           
  1004                           ;Master.c: 142:     RCSTAbits.CREN = 1;
  1005  00B0  1618               	bsf	24,4	;volatile
  1006  00B1                     l902:
  1007                           
  1008                           ;Master.c: 143:     TXSTAbits.TXEN = 1;
  1009  00B1  1683               	bsf	3,5	;RP0=1, select bank1
  1010  00B2  1303               	bcf	3,6	;RP1=0, select bank1
  1011  00B3  1698               	bsf	24,5	;volatile
  1012  00B4                     l904:
  1013                           
  1014                           ;Master.c: 146:     INTCONbits.GIE = 1;
  1015  00B4  178B               	bsf	11,7	;volatile
  1016  00B5                     l906:
  1017                           
  1018                           ;Master.c: 147:     INTCONbits.PEIE = 1;
  1019  00B5  170B               	bsf	11,6	;volatile
  1020  00B6                     l908:
  1021                           
  1022                           ;Master.c: 148:     PIR1bits.RCIF = 0;
  1023  00B6  1283               	bcf	3,5	;RP0=0, select bank0
  1024  00B7  1303               	bcf	3,6	;RP1=0, select bank0
  1025  00B8  128C               	bcf	12,5	;volatile
  1026  00B9                     l910:
  1027                           
  1028                           ;Master.c: 149:     PIE1bits.RCIE = 1;
  1029  00B9  1683               	bsf	3,5	;RP0=1, select bank1
  1030  00BA  1303               	bcf	3,6	;RP1=0, select bank1
  1031  00BB  168C               	bsf	12,5	;volatile
  1032  00BC                     l912:
  1033                           
  1034                           ;Master.c: 151:     spiInit(SPI_MASTER_OSC_DIV4, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_IDLE_
      +                          LOW, SPI_IDLE_2_ACTIVE);
  1035  00BC  01F3               	clrf	spiInit@sDataSample
  1036  00BD  01F4               	clrf	spiInit@sClockIdle
  1037  00BE  01F5               	clrf	spiInit@sTransmitEdge
  1038  00BF  3020               	movlw	32
  1039  00C0  120A  118A  20C6  120A  118A  	fcall	_spiInit
  1040  00C5                     l136:
  1041  00C5  0008               	return
  1042  00C6                     __end_of_setup:
  1043                           
  1044                           	psect	text5
  1045  00C6                     __ptext5:	
  1046 ;; *************** function _spiInit *****************
  1047 ;; Defined at:
  1048 ;;		line 12 in file "SPI.c"
  1049 ;; Parameters:    Size  Location     Type
  1050 ;;  sType           1    wreg     enum E1264
  1051 ;;  sDataSample     1    3[COMMON] enum E1272
  1052 ;;  sClockIdle      1    4[COMMON] enum E1276
  1053 ;;  sTransmitEdg    1    5[COMMON] enum E1280
  1054 ;; Auto vars:     Size  Location     Type
  1055 ;;  sType           1    6[COMMON] enum E1264
  1056 ;; Return value:  Size  Location     Type
  1057 ;;                  1    wreg      void 
  1058 ;; Registers used:
  1059 ;;		wreg, status,2, status,0
  1060 ;; Tracked objects:
  1061 ;;		On entry : 0/0
  1062 ;;		On exit  : 0/0
  1063 ;;		Unchanged: 0/0
  1064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1065 ;;      Params:         3       0       0       0       0
  1066 ;;      Locals:         1       0       0       0       0
  1067 ;;      Temps:          0       0       0       0       0
  1068 ;;      Totals:         4       0       0       0       0
  1069 ;;Total ram usage:        4 bytes
  1070 ;; Hardware stack levels used: 1
  1071 ;; Hardware stack levels required when called: 1
  1072 ;; This function calls:
  1073 ;;		Nothing
  1074 ;; This function is called by:
  1075 ;;		_setup
  1076 ;; This function uses a non-reentrant model
  1077 ;;
  1078                           
  1079                           
  1080                           ;psect for function _spiInit
  1081  00C6                     _spiInit:
  1082                           
  1083                           ;incstack = 0
  1084                           ; Regs used in _spiInit: [wreg+status,2+status,0]
  1085                           ;spiInit@sType stored from wreg
  1086  00C6  00F6               	movwf	spiInit@sType
  1087  00C7                     l854:
  1088                           
  1089                           ;SPI.c: 12: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);SPI.c: 13: {;SPI.c: 14:     TRISC5 = 0;
  1090  00C7  1683               	bsf	3,5	;RP0=1, select bank1
  1091  00C8  1303               	bcf	3,6	;RP1=0, select bank1
  1092  00C9  1287               	bcf	7,5	;volatile
  1093                           
  1094                           ;SPI.c: 15:     if(sType & 0b00000100)
  1095  00CA  1D76               	btfss	spiInit@sType,2
  1096  00CB  28CD               	goto	u91
  1097  00CC  28CE               	goto	u90
  1098  00CD                     u91:
  1099  00CD  28D2               	goto	l860
  1100  00CE                     u90:
  1101  00CE                     l856:
  1102                           
  1103                           ;SPI.c: 16:     {;SPI.c: 17:         SSPSTAT = sTransmitEdge;
  1104  00CE  0875               	movf	spiInit@sTransmitEdge,w
  1105  00CF  0094               	movwf	20	;volatile
  1106  00D0                     l858:
  1107                           
  1108                           ;SPI.c: 18:         TRISC3 = 1;
  1109  00D0  1587               	bsf	7,3	;volatile
  1110                           
  1111                           ;SPI.c: 19:     }
  1112  00D1  28D6               	goto	l16
  1113  00D2                     l860:
  1114                           
  1115                           ;SPI.c: 21:     {;SPI.c: 22:         SSPSTAT = sDataSample | sTransmitEdge;
  1116  00D2  0873               	movf	spiInit@sDataSample,w
  1117  00D3  0475               	iorwf	spiInit@sTransmitEdge,w
  1118  00D4  0094               	movwf	20	;volatile
  1119  00D5                     l862:
  1120                           
  1121                           ;SPI.c: 23:         TRISC3 = 0;
  1122  00D5  1187               	bcf	7,3	;volatile
  1123  00D6                     l16:	
  1124                           ;SPI.c: 24:     }
  1125                           
  1126                           
  1127                           ;SPI.c: 26:     SSPCON = sType | sClockIdle;
  1128  00D6  0876               	movf	spiInit@sType,w
  1129  00D7  0474               	iorwf	spiInit@sClockIdle,w
  1130  00D8  1283               	bcf	3,5	;RP0=0, select bank0
  1131  00D9  1303               	bcf	3,6	;RP1=0, select bank0
  1132  00DA  0094               	movwf	20	;volatile
  1133  00DB                     l17:
  1134  00DB  0008               	return
  1135  00DC                     __end_of_spiInit:
  1136                           
  1137                           	psect	text6
  1138  00DC                     __ptext6:	
  1139 ;; *************** function _isr *****************
  1140 ;; Defined at:
  1141 ;;		line 69 in file "Master.c"
  1142 ;; Parameters:    Size  Location     Type
  1143 ;;		None
  1144 ;; Auto vars:     Size  Location     Type
  1145 ;;		None
  1146 ;; Return value:  Size  Location     Type
  1147 ;;                  1    wreg      void 
  1148 ;; Registers used:
  1149 ;;		wreg
  1150 ;; Tracked objects:
  1151 ;;		On entry : 0/0
  1152 ;;		On exit  : 0/0
  1153 ;;		Unchanged: 0/0
  1154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1155 ;;      Params:         0       0       0       0       0
  1156 ;;      Locals:         0       0       0       0       0
  1157 ;;      Temps:          3       0       0       0       0
  1158 ;;      Totals:         3       0       0       0       0
  1159 ;;Total ram usage:        3 bytes
  1160 ;; Hardware stack levels used: 1
  1161 ;; This function calls:
  1162 ;;		Nothing
  1163 ;; This function is called by:
  1164 ;;		Interrupt level 1
  1165 ;; This function uses a non-reentrant model
  1166 ;;
  1167                           
  1168                           
  1169                           ;psect for function _isr
  1170  00DC                     _isr:
  1171  00DC                     i1l808:
  1172                           
  1173                           ;Master.c: 70:     if(PIR1bits.RCIF){
  1174  00DC  1283               	bcf	3,5	;RP0=0, select bank0
  1175  00DD  1303               	bcf	3,6	;RP1=0, select bank0
  1176  00DE  1E8C               	btfss	12,5	;volatile
  1177  00DF  28E1               	goto	u5_21
  1178  00E0  28E2               	goto	u5_20
  1179  00E1                     u5_21:
  1180  00E1  28E6               	goto	i1l120
  1181  00E2                     u5_20:
  1182  00E2                     i1l810:
  1183                           
  1184                           ;Master.c: 71:         op = RCREG;
  1185  00E2  081A               	movf	26,w	;volatile
  1186  00E3  00F0               	movwf	??_isr
  1187  00E4  0870               	movf	??_isr,w
  1188  00E5  00F7               	movwf	_op
  1189  00E6                     i1l120:
  1190  00E6  0872               	movf	??_isr+2,w
  1191  00E7  008A               	movwf	10
  1192  00E8  0E71               	swapf	??_isr+1,w
  1193  00E9  0083               	movwf	3
  1194  00EA  0EFE               	swapf	btemp,f
  1195  00EB  0E7E               	swapf	btemp,w
  1196  00EC  0009               	retfie
  1197  00ED                     __end_of_isr:
  1198  007E                     btemp	set	126	;btemp
  1199  007E                     wtemp0	set	126
  1200                           
  1201                           	psect	intentry
  1202  0004                     __pintentry:	
  1203                           ;incstack = 0
  1204                           ; Regs used in _isr: [wreg]
  1205                           
  1206  0004                     interrupt_function:
  1207  007E                     saved_w	set	btemp
  1208  0004  00FE               	movwf	btemp
  1209  0005  0E03               	swapf	3,w
  1210  0006  00F1               	movwf	??_isr+1
  1211  0007  080A               	movf	10,w
  1212  0008  00F2               	movwf	??_isr+2
  1213  0009  120A  118A  28DC   	ljmp	_isr
  1214                           
  1215                           	psect	config
  1216                           
  1217                           ;Config register CONFIG1 @ 0x2007
  1218                           ;	Oscillator Selection bits
  1219                           ;	FOSC = EXTRC_NOCLKOUT, RCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, RC on RA7
      +                          /OSC1/CLKIN
  1220                           ;	Watchdog Timer Enable bit
  1221                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1222                           ;	Power-up Timer Enable bit
  1223                           ;	PWRTE = OFF, PWRT disabled
  1224                           ;	RE3/MCLR pin function select bit
  1225                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  1226                           ;	Code Protection bit
  1227                           ;	CP = OFF, Program memory code protection is disabled
  1228                           ;	Data Code Protection bit
  1229                           ;	CPD = OFF, Data memory code protection is disabled
  1230                           ;	Brown Out Reset Selection bits
  1231                           ;	BOREN = OFF, BOR disabled
  1232                           ;	Internal External Switchover bit
  1233                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1234                           ;	Fail-Safe Clock Monitor Enabled bit
  1235                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1236                           ;	Low Voltage Programming Enable bit
  1237                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1238                           ;	In-Circuit Debugger Mode bit
  1239                           ;	DEBUG = 0x1, unprogrammed default
  1240  2007                     	org	8199
  1241  2007  20D6               	dw	8406
  1242                           
  1243                           ;Config register CONFIG2 @ 0x2008
  1244                           ;	Brown-out Reset Selection bit
  1245                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  1246                           ;	Flash Program Memory Self Write Enable bits
  1247                           ;	WRT = OFF, Write protection off
  1248  2008                     	org	8200
  1249  2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         44
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      11
    BANK0            80      3      43
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _setup->_spiInit

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     382
                                              0 BANK0      3     3      0
                              _setup
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (1) _spiWrite                                             1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (2) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     360
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              4     1      3     360
                                              3 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setup
     _spiInit
   _spiRead
     _spiReceiveWait
   _spiWrite

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      36       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      3      2B       5       53.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      36      12        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Wed Aug 04 13:34:03 2021

                      _s 0020              _SSPSTATbits 0094                       l20 00FE  
                     l23 0104                       l16 00D6                       l17 00DB  
                     l34 00F5                       l26 010A                       u90 00CE  
                     u91 00CD                       _op 0077                       fsr 0004  
                    l136 00C5                      l900 00B0                      l910 00B9  
                    l902 00B1                      l912 00BC                      l904 00B4  
                    l906 00B5                      l860 00D2                      l908 00B6  
                    l862 00D5                      l854 00C7                      l870 00F2  
                    l856 00CE                      l880 009A                      l864 00FE  
                    l960 0028                      l858 00D0                      l890 00A3  
                    l882 009B                      l874 0091                      l866 0106  
                    l970 0049                      l962 0032                      l892 00A4  
                    l884 009E                      l876 0095                      l868 00ED  
                    l980 0063                      l972 004B                      l964 0038  
                    l956 0020                      l894 00A7                      l886 009F  
                    l878 0099                      l990 0078                      l982 0066  
                    l974 0053                      l966 003D                      l958 0025  
                    l896 00AC                      l888 00A2                      l984 006C  
                    l976 0057                      l968 0045                      l898 00AF  
                    l994 007B                      l986 0070                      l978 0059  
                    l996 0089                      l988 0072                      u100 0104  
                    u101 0103                      u140 003D                      u141 003C  
                    u150 006C                      u151 006B                      u160 0078  
                    u161 0077                      u177 002E                      u187 005F  
                    u197 0083                      _ban 007A                      _isr 00DC  
                    _val 0043                      indf 0000                     ?_isr 0070  
                   _TXIF 0064                     u5_20 00E2                     u5_21 00E1  
                   _main 0020                     _val1 0079                     _val2 0078  
                   _val3 0047                     btemp 007E                     start 000C  
                  ??_isr 0070                    ?_main 0070                    _ANSEL 0188  
                  i1l120 00E6                    i1l810 00E2                    i1l808 00DC  
                  _RCREG 001A                    _SPBRG 0099                    _PORTB 0006  
                  _PORTD 0008                    _TRISB 0086                    _TRISC 0087  
                  _TRISD 0088                    _TXREG 0019                    _setup 0091  
                  pclath 000A          __end_of_spiInit 00DC          __end_of_spiRead 00F6  
                  status 0003                    wtemp0 007E          __initialization 000F  
           __end_of_main 0091                   ??_main 0048                   ?_setup 0070  
                 _ANSELH 0189                   _SPBRGH 009A                   _TRISC3 043B  
                 _TRISC5 043D                   _SSPCON 0014                   _SSPBUF 0013  
                 saved_w 007E         __end_of_spiWrite 010B                ??_spiInit 0076  
              ??_spiRead 0073  __end_of__initialization 001C           __pcstackCOMMON 0070  
          __end_of_setup 00C6                  ??_setup 0077               __pbssBANK0 0020  
             __pmaintext 0020               __pintentry 0004  __size_of_spiReceiveWait 0007  
                _SSPSTAT 0094                ?_spiWrite 0070                  __ptext1 0105  
                __ptext2 00ED                  __ptext3 00FE                  __ptext4 0091  
                __ptext5 00C6                  __ptext6 00DC             __size_of_isr 0011  
                _spiInit 00C6                  _spiRead 00ED                  clrloop0 00F7  
   end_of_initialization 001C                _RCSTAbits 0018               ??_spiWrite 0073  
              _PORTCbits 0007                _TRISCbits 0087              spiWrite@dat 0073  
              _TXSTAbits 0098           _spiReceiveWait 00FE              _BAUDCTLbits 0187  
    start_initialization 000F              __end_of_isr 00ED   __end_of_spiReceiveWait 0105  
            __pbssCOMMON 0077                ___latbits 0002            __pcstackBANK0 0048  
        ?_spiReceiveWait 0070        __size_of_spiWrite 0006                 ?_spiInit 0073  
               ?_spiRead 0070           __size_of_setup 0035     spiInit@sTransmitEdge 0075  
      interrupt_function 0004                clear_ram0 00F6                 _PIE1bits 008C  
     spiInit@sDataSample 0073                 _PIR1bits 000C         __size_of_spiInit 0016  
       __size_of_spiRead 0009            __size_of_main 0071                 _spiWrite 0105  
           spiInit@sType 0076        spiInit@sClockIdle 0074               _INTCONbits 000B  
               intlevel1 0000         ??_spiReceiveWait 0073  
